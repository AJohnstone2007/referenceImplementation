
(* ART3 grammar generated by ART from 'v2\csharpV2.art' on Jun 10 2018 08:40:14 : AJ multiply out only*)

compilation_unit ::=
   # |
   namespace_member_declarations |
   global_attributes |
   global_attributes namespace_member_declarations |
   using_directives |
   using_directives namespace_member_declarations |
   using_directives global_attributes |
   using_directives global_attributes namespace_member_declarations 

accessor_body ::=
   block |
   ';' 

accessor_declarations ::=
   get_accessor_declaration |
   get_accessor_declaration set_accessor_declaration |
   set_accessor_declaration |
   set_accessor_declaration get_accessor_declaration 

add_accessor_declaration ::=
   'add' block |
   attributes 'add' block 

additive_expression ::=
   multiplicative_expression |
   additive_expression '+' multiplicative_expression |
   additive_expression '-' multiplicative_expression 

and_expression ::=
   equality_expression |
   and_expression '&' equality_expression 

argument ::=
   expression |
   'ref' variable_reference |
   'out' variable_reference 

argument_list ::=
   argument |
   argument_list ',' argument 

array_creation_expression ::=
   'new' array_type array_initializer |
   'new' non_array_type '[' expression_list ']' |
   'new' non_array_type '[' expression_list ']' array_initializer |
   'new' non_array_type '[' expression_list ']' rank_specifiers |
   'new' non_array_type '[' expression_list ']' rank_specifiers array_initializer 

array_initializer ::=
   '{' variable_initializer_list ',' '}' |
   '{' '}' |
   '{' variable_initializer_list '}' 

array_type ::=
   non_array_type rank_specifiers 

assignment ::=
   unary_expression assignment_operator expression 

assignment_operator ::=
   '=' |
   '+=' |
   '-=' |
   '*=' |
   '/=' |
   '%=' |
   '&=' |
   '|=' |
   '^=' |
   '<<=' |
   '>>=' 

attribute ::=
   attribute_name |
   attribute_name attribute_arguments 

attribute_argument_expression ::=
   expression 

attribute_arguments ::=
   '(' positional_argument_list ',' named_argument_list ')' |
   '(' named_argument_list ')' |
   '(' ')' |
   '(' positional_argument_list ')' 

attribute_list ::=
   attribute |
   attribute_list ',' attribute 

attribute_name ::=
   type_name 

attribute_section ::=
   '[' attribute_list ']' |
   '[' attribute_target_specifier attribute_list ']' |
   '[' attribute_list ',' ']' |
   '[' attribute_target_specifier attribute_list ',' ']' 

attribute_sections ::=
   attribute_section |
   attribute_sections attribute_section 

attribute_target ::=
   'field' |
   'event' |
   'method' |
   'param' |
   'property' |
   'return' |
   type 

attribute_target_specifier ::=
   attribute_target ':' 

attributes ::=
   attribute_sections 

base_access ::=
   'base' '.' identifier |
   'base' '[' expression_list ']' 

binary_operator_declarator ::=
   type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')' 

block ::=
   '{' '}' |
   '{' statement_list '}' 

boolean_expression ::=
   expression 

boolean_literal ::=
   'true' |
   'false' 

break_statement ::=
   'break' ';' 

cast_expression ::=
   '(' type ')' unary_expression 

catch_clauses ::=
   specific_catch_clauses |
   specific_catch_clauses general_catch_clause |
   general_catch_clause |
   specific_catch_clauses general_catch_clause 

checked_expression ::=
   'checked' '(' expression ')' 

checked_statement ::=
   'checked' block 

class_base ::=
   ':' class_type |
   ':' interface_type_list |
   ':' class_type ',' interface_type_list 

class_body ::=
   '{' '}' |
   '{' class_member_declarations '}' 

class_declaration ::=
   'class' identifier class_body |
   'class' identifier class_body ';' |
   'class' identifier class_base class_body |
   'class' identifier class_base class_body ';' |
   class_modifiers 'class' identifier class_body |
   class_modifiers 'class' identifier class_body ';' |
   class_modifiers 'class' identifier class_base class_body |
   class_modifiers 'class' identifier class_base class_body ';' |
   attributes 'class' identifier class_body |
   attributes 'class' identifier class_body ';' |
   attributes 'class' identifier class_base class_body |
   attributes 'class' identifier class_base class_body ';' |
   attributes class_modifiers 'class' identifier class_body |
   attributes class_modifiers 'class' identifier class_body ';' |
   attributes class_modifiers 'class' identifier class_base class_body |
   attributes class_modifiers 'class' identifier class_base class_body ';' 

class_member_declaration ::=
   constant_declaration |
   field_declaration |
   method_declaration |
   property_declaration |
   event_declaration |
   indexer_declaration |
   operator_declaration |
   constructor_declaration |
   destructor_declaration |
   static_constructor_declaration |
   type_declaration 

class_member_declarations ::=
   class_member_declaration |
   class_member_declarations class_member_declaration 

class_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'abstract' |
   'sealed' 

class_modifiers ::=
   class_modifier |
   class_modifiers class_modifier 

class_type ::=
   type_name |
   'object' |
   'string' 

conditional_and_expression ::=
   inclusive_or_expression |
   conditional_and_expression '&&' inclusive_or_expression 

conditional_expression ::=
   conditional_or_expression |
   conditional_or_expression '?' expression ':' expression 

conditional_or_expression ::=
   conditional_and_expression |
   conditional_or_expression '||' conditional_and_expression 

constant_declaration ::=
   'const' type constant_declarators ';' |
   constant_modifiers 'const' type constant_declarators ';' |
   attributes 'const' type constant_declarators ';' |
   attributes constant_modifiers 'const' type constant_declarators ';' 

constant_declarator ::=
   identifier '=' constant_expression 

constant_declarators ::=
   constant_declarator |
   constant_declarators ',' constant_declarator 

constant_expression ::=
   expression 

constant_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' 

constant_modifiers ::=
   constant_modifier |
   constant_modifiers constant_modifier 

constructor_body ::=
   block |
   ';' 

constructor_declaration ::=
   constructor_declarator constructor_body |
   constructor_modifiers constructor_declarator constructor_body |
   attributes constructor_declarator constructor_body |
   attributes constructor_modifiers constructor_declarator constructor_body 

constructor_declarator ::=
   identifier '(' ')' |
   identifier '(' ')' constructor_initializer |
   identifier '(' formal_parameter_list ')' |
   identifier '(' formal_parameter_list ')' constructor_initializer 

constructor_initializer ::=
   ':' 'base' '(' ')' |
   ':' 'base' '(' argument_list ')' |
   ':' 'this' '(' ')' |
   ':' 'this' '(' argument_list ')' 

constructor_modifier ::=
   'public' |
   'protected' |
   'internal' |
   'private' |
   'extern' 

constructor_modifiers ::=
   constructor_modifier |
   constructor_modifiers constructor_modifier 

continue_statement ::=
   'continue' ';' 

conversion_operator_declarator ::=
   'implicit' 'operator' type '(' type identifier ')' |
   'explicit' 'operator' type '(' type identifier ')' 

declaration_statement ::=
   local_variable_declaration ';' |
   local_constant_declaration ';' 

delegate_creation_expression ::=
   'new' delegate_type '(' expression ')' 

delegate_declaration ::=
   '(' ')' ';' |
   '(' formal_parameter_list ')' ';' |
   'delegate' return_type identifier |
   delegate_modifiers 'delegate' return_type identifier |
   attributes 'delegate' return_type identifier |
   attributes delegate_modifiers 'delegate' return_type identifier 

delegate_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' 

delegate_modifiers ::=
   delegate_modifier |
   delegate_modifiers delegate_modifier 

delegate_type ::=
   type_name 

destructor_body ::=
   block |
   ';' 

destructor_declaration ::=
   '~' identifier '(' ')' destructor_body |
   'extern' '~' identifier '(' ')' destructor_body |
   attributes '~' identifier '(' ')' destructor_body |
   attributes 'extern' '~' identifier '(' ')' destructor_body 

dim_separators ::=
   ',' |
   dim_separators ',' 

do_statement ::=
   'do' embedded_statement 'while' '(' boolean_expression ')' ';' 

element_access ::=
   primary_no_array_creation_expression '[' expression_list ']' 

embedded_statement ::=
   block |
   empty_statement |
   expression_statement |
   selection_statement |
   iteration_statement |
   jump_statement |
   try_statement |
   checked_statement |
   unchecked_statement |
   lock_statement |
   using_statement 

empty_statement ::=
   ';' 

enum_base ::=
   ':' integral_type 

enum_body ::=
   '{' enum_member_declarations ',' '}' |
   '{' '}' |
   '{' enum_member_declarations '}' 

enum_declaration ::=
   'enum' identifier enum_body |
   'enum' identifier enum_body ';' |
   'enum' identifier enum_base enum_body |
   'enum' identifier enum_base enum_body ';' |
   enum_modifiers 'enum' identifier enum_body |
   enum_modifiers 'enum' identifier enum_body ';' |
   enum_modifiers 'enum' identifier enum_base enum_body |
   enum_modifiers 'enum' identifier enum_base enum_body ';' |
   attributes 'enum' identifier enum_body |
   attributes 'enum' identifier enum_body ';' |
   attributes 'enum' identifier enum_base enum_body |
   attributes 'enum' identifier enum_base enum_body ';' |
   attributes enum_modifiers 'enum' identifier enum_body |
   attributes enum_modifiers 'enum' identifier enum_body ';' |
   attributes enum_modifiers 'enum' identifier enum_base enum_body |
   attributes enum_modifiers 'enum' identifier enum_base enum_body ';' 

enum_member_declaration ::=
   identifier |
   attributes identifier |
   identifier '=' constant_expression |
   attributes identifier '=' constant_expression 

enum_member_declarations ::=
   enum_member_declaration |
   enum_member_declarations ',' enum_member_declaration 

enum_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' 

enum_modifiers ::=
   enum_modifier |
   enum_modifiers enum_modifier 

enum_type ::=
   type_name 

equality_expression ::=
   relational_expression |
   equality_expression '==' relational_expression |
   equality_expression '!=' relational_expression 

event_accessor_declarations ::=
   add_accessor_declaration remove_accessor_declaration |
   remove_accessor_declaration add_accessor_declaration 

event_declaration ::=
   'event' type variable_declarators ';' |
   event_modifiers 'event' type variable_declarators ';' |
   attributes 'event' type variable_declarators ';' |
   attributes event_modifiers 'event' type variable_declarators ';' |
   'event' type member_name '{' event_accessor_declarations '}' |
   event_modifiers 'event' type member_name '{' event_accessor_declarations '}' |
   attributes 'event' type member_name '{' event_accessor_declarations '}' |
   attributes event_modifiers 'event' type member_name '{' event_accessor_declarations '}' 

event_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'static' |
   'virtual' |
   'sealed' |
   'override' |
   'abstract' |
   'extern' 

event_modifiers ::=
   event_modifier |
   event_modifiers event_modifier 

exclusive_or_expression ::=
   and_expression |
   exclusive_or_expression '^' and_expression 

expression ::=
   conditional_expression |
   assignment 

expression_list ::=
   expression |
   expression_list ',' expression 

expression_statement ::=
   statement_expression ';' 

field_declaration ::=
   type variable_declarators ';' |
   field_modifiers type variable_declarators ';' |
   attributes type variable_declarators ';' |
   attributes field_modifiers type variable_declarators ';' 

field_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'static' |
   'readonly' |
   'volatile' 

field_modifiers ::=
   field_modifier |
   field_modifiers field_modifier 

finally_clause ::=
   'finally' block 

fixed_parameter ::=
   type identifier |
   parameter_modifier type identifier |
   attributes type identifier |
   attributes parameter_modifier type identifier 

fixed_parameters ::=
   fixed_parameter |
   fixed_parameters ',' fixed_parameter 

floating_point_type ::=
   'float' |
   'double' 

for_condition ::=
   boolean_expression 

for_initializer ::=
   local_variable_declaration |
   statement_expression_list 

for_iterator ::=
   statement_expression_list 

for_statement ::=
   'for' '(' ';' ';' ')' embedded_statement |
   'for' '(' ';' ';' for_iterator ')' embedded_statement |
   'for' '(' ';' for_condition ';' ')' embedded_statement |
   'for' '(' ';' for_condition ';' for_iterator ')' embedded_statement |
   'for' '(' for_initializer ';' ';' ')' embedded_statement |
   'for' '(' for_initializer ';' ';' for_iterator ')' embedded_statement |
   'for' '(' for_initializer ';' for_condition ';' ')' embedded_statement |
   'for' '(' for_initializer ';' for_condition ';' for_iterator ')' embedded_statement 

foreach_statement ::=
   'foreach' '(' type identifier 'in' expression ')' embedded_statement 

formal_parameter_list ::=
   fixed_parameters |
   fixed_parameters ',' parameter_array |
   parameter_array 

general_catch_clause ::=
   'catch' block 

get_accessor_declaration ::=
   'get' accessor_body |
   attributes 'get' accessor_body 

global_attribute_section ::=
   '[' global_attribute_target_specifier attribute_list ']' |
   '[' global_attribute_target_specifier attribute_list ',]' 

global_attribute_sections ::=
   global_attribute_section |
   global_attribute_sections global_attribute_section 

global_attribute_target ::=
   'assembly' |
   'module' 

global_attribute_target_specifier ::=
   global_attribute_target ':' 

global_attributes ::=
   global_attribute_sections 

goto_statement ::=
   'goto' identifier ';' |
   'goto' 'case' constant_expression ';' |
   'goto' 'default' ';' 

identifier ::=
   'ID' 

if_statement ::=
   'if' '(' boolean_expression ')' embedded_statement |
   'if' '(' boolean_expression ')' embedded_statement 'else' embedded_statement 

inclusive_or_expression ::=
   exclusive_or_expression |
   inclusive_or_expression '|' exclusive_or_expression 

indexer_declaration ::=
   indexer_declarator '{' accessor_declarations '}' |
   indexer_modifiers indexer_declarator '{' accessor_declarations '}' |
   attributes indexer_declarator '{' accessor_declarations '}' |
   attributes indexer_modifiers indexer_declarator '{' accessor_declarations '}' 

indexer_declarator ::=
   type 'this' '[' formal_parameter_list ']' |
   type interface_type '.' 'this' '[' formal_parameter_list ']' 

indexer_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'virtual' |
   'sealed' |
   'override' |
   'abstract' |
   'extern' 

indexer_modifiers ::=
   indexer_modifier |
   indexer_modifiers indexer_modifier 

integral_type ::=
   'sbyte' |
   'byte' |
   'short' |
   'ushort' |
   'int' |
   'uint' |
   'long' |
   'ulong' |
   'char' 

interface_accessors ::=
   'get' ';' |
   attributes 'get' ';' |
   'set' ';' |
   attributes 'set' ';' |
   'get' ';' 'set' ';' |
   'get' ';' attributes 'set' ';' |
   attributes 'get' ';' 'set' ';' |
   attributes 'get' ';' attributes 'set' ';' |
   'set' ';' 'get' ';' |
   'set' ';' attributes 'get' ';' |
   attributes 'set' ';' 'get' ';' |
   attributes 'set' ';' attributes 'get' ';' 

interface_base ::=
   ':' interface_type_list 

interface_body ::=
   '{' '}' |
   '{' interface_member_declarations '}' 

interface_declaration ::=
   'interface' identifier interface_body |
   'interface' identifier interface_body ';' |
   'interface' identifier interface_base interface_body |
   'interface' identifier interface_base interface_body ';' |
   interface_modifiers 'interface' identifier interface_body |
   interface_modifiers 'interface' identifier interface_body ';' |
   interface_modifiers 'interface' identifier interface_base interface_body |
   interface_modifiers 'interface' identifier interface_base interface_body ';' |
   attributes 'interface' identifier interface_body |
   attributes 'interface' identifier interface_body ';' |
   attributes 'interface' identifier interface_base interface_body |
   attributes 'interface' identifier interface_base interface_body ';' |
   attributes interface_modifiers 'interface' identifier interface_body |
   attributes interface_modifiers 'interface' identifier interface_body ';' |
   attributes interface_modifiers 'interface' identifier interface_base interface_body |
   attributes interface_modifiers 'interface' identifier interface_base interface_body ';' 

interface_event_declaration ::=
   'event' type identifier ';' |
   'new' 'event' type identifier ';' |
   attributes 'event' type identifier ';' |
   attributes 'new' 'event' type identifier ';' 

interface_indexer_declaration ::=
   type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}' |
   'new' type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}' |
   attributes type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}' |
   attributes 'new' type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}' 

interface_member_declaration ::=
   interface_method_declaration |
   interface_property_declaration |
   interface_event_declaration |
   interface_indexer_declaration 

interface_member_declarations ::=
   interface_member_declaration |
   interface_member_declarations interface_member_declaration 

interface_method_declaration ::=
   return_type identifier '(' ')' ';' |
   return_type identifier '(' formal_parameter_list ')' ';' |
   'new' return_type identifier '(' ')' ';' |
   'new' return_type identifier '(' formal_parameter_list ')' ';' |
   attributes return_type identifier '(' ')' ';' |
   attributes return_type identifier '(' formal_parameter_list ')' ';' |
   attributes 'new' return_type identifier '(' ')' ';' |
   attributes 'new' return_type identifier '(' formal_parameter_list ')' ';' 

interface_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' 

interface_modifiers ::=
   interface_modifier |
   interface_modifiers interface_modifier 

interface_property_declaration ::=
   type identifier '{' interface_accessors '}' |
   'new' type identifier '{' interface_accessors '}' |
   attributes type identifier '{' interface_accessors '}' |
   attributes 'new' type identifier '{' interface_accessors '}' 

interface_type ::=
   type_name 

interface_type_list ::=
   interface_type |
   interface_type_list ',' interface_type 

invocation_expression ::=
   primary_expression '(' ')' |
   primary_expression '(' argument_list ')' 

iteration_statement ::=
   while_statement |
   do_statement |
   for_statement |
   foreach_statement 

jump_statement ::=
   break_statement |
   continue_statement |
   goto_statement |
   return_statement |
   throw_statement 

labeled_statement ::=
   identifier ':' statement 

literal ::=
   boolean_literal |
   'INTEGER' |
   'REAL' |
   'STRING' |
   null_literal 

local_constant_declaration ::=
   'const' type constant_declarators 

local_variable_declaration ::=
   type local_variable_declarators 

local_variable_declarator ::=
   identifier |
   identifier '=' local_variable_initializer 

local_variable_declarators ::=
   local_variable_declarator |
   local_variable_declarators ',' local_variable_declarator 

local_variable_initializer ::=
   expression |
   array_initializer 

lock_statement ::=
   'lock' '(' expression ')' embedded_statement 

member_access ::=
   primary_expression '.' identifier |
   predefined_type '.' identifier 

member_name ::=
   identifier |
   interface_type '.' identifier 

method_body ::=
   block |
   ';' 

method_declaration ::=
   method_header method_body 

method_header ::=
   return_type member_name '(' ')' |
   return_type member_name '(' formal_parameter_list ')' |
   method_modifiers return_type member_name '(' ')' |
   method_modifiers return_type member_name '(' formal_parameter_list ')' |
   attributes return_type member_name '(' ')' |
   attributes return_type member_name '(' formal_parameter_list ')' |
   attributes method_modifiers return_type member_name '(' ')' |
   attributes method_modifiers return_type member_name '(' formal_parameter_list ')' 

method_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'static' |
   'virtual' |
   'sealed' |
   'override' |
   'abstract' |
   'extern' 

method_modifiers ::=
   method_modifier |
   method_modifiers method_modifier 

multiplicative_expression ::=
   unary_expression |
   multiplicative_expression '*' unary_expression |
   multiplicative_expression '/' unary_expression |
   multiplicative_expression '%' unary_expression 

named_argument ::=
   identifier '=' attribute_argument_expression 

named_argument_list ::=
   named_argument |
   named_argument_list ',' named_argument 

namespace_body ::=
   '{' '}' |
   '{' namespace_member_declarations '}' |
   '{' using_directives '}' |
   '{' using_directives namespace_member_declarations '}' 

namespace_declaration ::=
   'namespace' qualified_identifier namespace_body |
   'namespace' qualified_identifier namespace_body ';' 

namespace_member_declaration ::=
   namespace_declaration |
   type_declaration 

namespace_member_declarations ::=
   namespace_member_declaration |
   namespace_member_declarations namespace_member_declaration 

namespace_name ::=
   namespace_or_type_name 

namespace_or_type_name ::=
   identifier |
   namespace_or_type_name '.' identifier 

non_array_type ::=
   type 

null_literal ::=
   'null' 

numeric_type ::=
   integral_type |
   floating_point_type |
   'decimal' 

object_creation_expression ::=
   'new' type '(' ')' |
   'new' type '(' argument_list ')' 

operator_body ::=
   block |
   ';' 

operator_declaration ::=
   operator_modifiers operator_declarator operator_body |
   attributes operator_modifiers operator_declarator operator_body 

operator_declarator ::=
   unary_operator_declarator |
   binary_operator_declarator |
   conversion_operator_declarator 

operator_modifier ::=
   'public' |
   'static' |
   'extern' 

operator_modifiers ::=
   operator_modifier |
   operator_modifiers operator_modifier 

overloadable_binary_operator ::=
   '+' |
   '-' |
   '*' |
   '/' |
   '%' |
   '&' |
   '|' |
   '^' |
   '<<' |
   '>>' |
   '==' |
   '!=' |
   '>' |
   '<' |
   '>=' |
   '<=' 

overloadable_unary_operator ::=
   '+' |
   '-' |
   '!' |
   '~' |
   '++' |
   '--' |
   'true' |
   'false' 

parameter_array ::=
   'params' array_type identifier |
   attributes 'params' array_type identifier 

parameter_modifier ::=
   'ref' |
   'out' 

parenthesized_expression ::=
   '(' expression ')' 

positional_argument ::=
   attribute_argument_expression 

positional_argument_list ::=
   positional_argument |
   positional_argument_list ',' positional_argument 

post_decrement_expression ::=
   primary_expression '--' 

post_increment_expression ::=
   primary_expression '++' 

pre_decrement_expression ::=
   '--' unary_expression 

pre_increment_expression ::=
   '++' unary_expression 

predefined_type ::=
   'bool' |
   'byte' |
   'char' |
   'decimal' |
   'double' |
   'float' |
   'int' |
   'long' |
   'object' |
   'sbyte' |
   'short' |
   'string' |
   'uint' |
   'ulong' |
   'ushort' 

primary_expression ::=
   primary_no_array_creation_expression |
   array_creation_expression 

primary_no_array_creation_expression ::=
   literal |
   simple_name |
   parenthesized_expression |
   member_access |
   invocation_expression |
   element_access |
   this_access |
   base_access |
   post_increment_expression |
   post_decrement_expression |
   object_creation_expression |
   delegate_creation_expression |
   typeof_expression |
   checked_expression |
   unchecked_expression 

property_declaration ::=
   type member_name '{' accessor_declarations '}' |
   property_modifiers type member_name '{' accessor_declarations '}' |
   attributes type member_name '{' accessor_declarations '}' |
   attributes property_modifiers type member_name '{' accessor_declarations '}' 

property_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' |
   'static' |
   'virtual' |
   'sealed' |
   'override' |
   'abstract' |
   'extern' 

property_modifiers ::=
   property_modifier |
   property_modifiers property_modifier 

qualified_identifier ::=
   identifier |
   qualified_identifier '.' identifier 

rank_specifier ::=
   '[' ']' |
   '[' dim_separators ']' 

rank_specifiers ::=
   rank_specifier |
   rank_specifiers rank_specifier 

reference_type ::=
   class_type |
   interface_type |
   array_type |
   delegate_type 

relational_expression ::=
   shift_expression |
   relational_expression '<' shift_expression |
   relational_expression '>' shift_expression |
   relational_expression '<=' shift_expression |
   relational_expression '>=' shift_expression |
   relational_expression 'is' type |
   relational_expression 'as' type 

remove_accessor_declaration ::=
   'remove' block |
   attributes 'remove' block 

resource_acquisition ::=
   local_variable_declaration |
   expression 

return_statement ::=
   'return' ';' |
   'return' expression ';' 

return_type ::=
   type |
   'void' 

selection_statement ::=
   if_statement |
   switch_statement 

set_accessor_declaration ::=
   'set' accessor_body |
   attributes 'set' accessor_body 

shift_expression ::=
   additive_expression |
   shift_expression '<<' additive_expression |
   shift_expression '>>' additive_expression 

simple_name ::=
   identifier 

simple_type ::=
   numeric_type |
   'bool' 

specific_catch_clause ::=
   'catch' '(' class_type ')' block |
   'catch' '(' class_type identifier ')' block 

specific_catch_clauses ::=
   specific_catch_clause |
   specific_catch_clauses specific_catch_clause 

statement ::=
   labeled_statement |
   declaration_statement |
   embedded_statement 

statement_expression ::=
   invocation_expression |
   object_creation_expression |
   assignment |
   post_increment_expression |
   post_decrement_expression |
   pre_increment_expression |
   pre_decrement_expression 

statement_expression_list ::=
   statement_expression |
   statement_expression_list ',' statement_expression 

statement_list ::=
   statement |
   statement_list statement 

static_constructor_body ::=
   block |
   ';' 

static_constructor_declaration ::=
   static_constructor_modifiers identifier '(' ')' static_constructor_body |
   attributes static_constructor_modifiers identifier '(' ')' static_constructor_body 

static_constructor_modifiers ::=
   'static' |
   'extern' 'static' |
   'static' |
   'static' 'extern' 

struct_body ::=
   '{' '}' |
   '{' struct_member_declarations '}' 

struct_declaration ::=
   'struct' identifier struct_body |
   'struct' identifier struct_body ';' |
   'struct' identifier struct_interfaces struct_body |
   'struct' identifier struct_interfaces struct_body ';' |
   struct_modifiers 'struct' identifier struct_body |
   struct_modifiers 'struct' identifier struct_body ';' |
   struct_modifiers 'struct' identifier struct_interfaces struct_body |
   struct_modifiers 'struct' identifier struct_interfaces struct_body ';' |
   attributes 'struct' identifier struct_body |
   attributes 'struct' identifier struct_body ';' |
   attributes 'struct' identifier struct_interfaces struct_body |
   attributes 'struct' identifier struct_interfaces struct_body ';' |
   attributes struct_modifiers 'struct' identifier struct_body |
   attributes struct_modifiers 'struct' identifier struct_body ';' |
   attributes struct_modifiers 'struct' identifier struct_interfaces struct_body |
   attributes struct_modifiers 'struct' identifier struct_interfaces struct_body ';' 

struct_interfaces ::=
   ':' interface_type_list 

struct_member_declaration ::=
   constant_declaration |
   field_declaration |
   method_declaration |
   property_declaration |
   event_declaration |
   indexer_declaration |
   operator_declaration |
   constructor_declaration |
   static_constructor_declaration |
   type_declaration 

struct_member_declarations ::=
   struct_member_declaration |
   struct_member_declarations struct_member_declaration 

struct_modifier ::=
   'new' |
   'public' |
   'protected' |
   'internal' |
   'private' 

struct_modifiers ::=
   struct_modifier |
   struct_modifiers struct_modifier 

struct_type ::=
   type_name |
   simple_type 

switch_block ::=
   '{' '}' |
   '{' switch_sections '}' 

switch_label ::=
   'case' constant_expression ':' |
   'default' ':' 

switch_labels ::=
   switch_label |
   switch_labels switch_label 

switch_section ::=
   switch_labels statement_list 

switch_sections ::=
   switch_section |
   switch_sections switch_section 

switch_statement ::=
   'switch' '(' expression ')' switch_block 

this_access ::=
   'this' 

throw_statement ::=
   'throw' ';' |
   'throw' expression ';' 

try_statement ::=
   'try' block catch_clauses |
   'try' block finally_clause |
   'try' block catch_clauses finally_clause 

type ::=
   value_type |
   reference_type 

type_declaration ::=
   class_declaration |
   struct_declaration |
   interface_declaration |
   enum_declaration |
   delegate_declaration 

type_name ::=
   namespace_or_type_name 

typeof_expression ::=
   'typeof' '(' type ')' |
   'typeof' '(' 'void' ')' 

unary_expression ::=
   primary_expression |
   '+' unary_expression |
   '-' unary_expression |
   '!' unary_expression |
   '~' unary_expression |
   pre_increment_expression |
   pre_decrement_expression |
   cast_expression 

unary_operator_declarator ::=
   type 'operator' overloadable_unary_operator '(' type identifier ')' 

unchecked_expression ::=
   'unchecked' '(' expression ')' 

unchecked_statement ::=
   'unchecked' block 

using_alias_directive ::=
   'using' identifier '=' namespace_or_type_name ';' 

using_directive ::=
   using_alias_directive |
   using_namespace_directive 

using_directives ::=
   using_directive |
   using_directives using_directive 

using_namespace_directive ::=
   'using' namespace_name ';' 

using_statement ::=
   'using' '(' resource_acquisition ')' embedded_statement 

value_type ::=
   struct_type |
   enum_type 

variable_declarator ::=
   identifier |
   identifier '=' variable_initializer 

variable_declarators ::=
   variable_declarator |
   variable_declarators ',' variable_declarator 

variable_initializer ::=
   expression |
   array_initializer 

variable_initializer_list ::=
   variable_initializer |
   variable_initializer_list ',' variable_initializer 

variable_reference ::=
   expression 

while_statement ::=
   'while' '(' boolean_expression ')' embedded_statement 

 