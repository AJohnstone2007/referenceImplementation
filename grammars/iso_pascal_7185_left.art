(* ART3 grammar generated by ART from 'iso_pascalV2.art' on May 13 2018 10:57:00 *)

program ::= program_heading ';' program_block '.'

ART_C_1 ::=
   ART_C_1 ',' actual_parameter |
   # 

ART_C_10 ::=
   ART_C_10 ',' index_expression |
   # 

ART_C_11 ::=
   ART_C_11 ',' label |
   # 

ART_C_12 ::=
   # |
   ART_C_12 procedure_declaration ';' |
   ART_C_12 function_declaration ';' 

ART_C_13 ::=
   ART_C_13 ',' variable_access |
   # 

ART_C_14 ::=
   ART_C_14 ',' variable_access |
   # 

ART_C_15 ::=
   ART_C_15 ',' record_variable |
   # 

ART_C_16 ::=
   ART_C_16 ',' member_designator |
   # 

ART_C_17 ::=
   ART_C_17 adding_operator term |
   # 

ART_C_18 ::=
   ART_C_18 ';' statement |
   # 

ART_C_19 ::=
   ART_C_19 multiplying_operator factor |
   # 

ART_C_2 ::=
   ART_C_2 ',' index_type |
   # 

ART_C_20 ::=
   ART_C_20 type_definition ';' |
   # 

ART_C_21 ::=
   ART_C_21 ';' index_type_specification |
   # 

ART_C_22 ::=
   ART_C_22 variable_declaration ';' |
   # 

ART_C_23 ::=
   ART_C_23 ';' variant |
   # 

ART_C_24 ::=
   ART_C_24 ',' write_parameter |
   # 

ART_C_25 ::=
   ART_C_25 ',' write_parameter |
   # 

ART_C_3 ::=
   ART_C_3 ',' case_constant |
   # 

ART_C_4 ::=
   ART_C_4 ';' case_list_element |
   # 

ART_C_5 ::=
   ART_C_5 constant_definition ';' |
   # 

ART_C_6 ::=
   ART_C_6 digit |
   # 

ART_C_7 ::=
   ART_C_7 ';' record_section |
   # 

ART_C_8 ::=
   ART_C_8 ';' formal_parameter_section |
   # 

ART_C_9 ::=
   ART_C_9 ',' identifier |
   # 

Boolean_expression ::=
   expression 

actual_parameter ::=
   expression |
   variable_access |
   procedure_identifier |
   function_identifier 

actual_parameter_list ::=
   '(' actual_parameter ART_C_1 ')' 

adding_operator ::=
   '+' |
   '-' |
   'or' 

apostrophe_image ::=
   '\"' 

array_type ::=
   'array' '[' index_type ART_C_2 ']' 'of' component_type 

array_variable ::=
   variable_access 

assignment_statement ::=
   variable_access ':=' expression |
   function_identifier ':=' expression 

base_type ::=
   ordinal_type 

block ::=
   label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part 

bound_identifier ::=
   identifier 

buffer_variable ::=
   file_variable '^' 

case_constant ::=
   constant 

case_constant_list ::=
   case_constant ART_C_3 

case_index ::=
   expression 

case_list_element ::=
   case_constant_list ':' statement 

case_statement ::=
   'case' case_index 'of' case_list_element ART_C_4 'end' |
   'case' case_index 'of' case_list_element ART_C_4 ';' 'end' 

character_string ::=
   'STRING' 

component_type ::=
   type_denoter 

component_variable ::=
   indexed_variable |
   field_designator 

compound_statement ::=
   'begin' statement_sequence 'end' 

conditional_statement ::=
   if_statement |
   case_statement 

conformant_array_parameter_specification ::=
   value_conformant_array_specification |
   variable_conformant_array_specification 

conformant_array_schema ::=
   packed_conformant_array_schema |
   unpacked_conformant_array_schema 

constant ::=
   character_string |
   unsigned_number |
   constant_identifier |
   sign unsigned_number |
   sign constant_identifier 

constant_definition ::=
   identifier '=' constant 

constant_definition_part ::=
   # |
   'const' constant_definition ';' ART_C_5 

constant_identifier ::=
   'constant_ID' 

control_variable ::=
   entire_variable 

digit ::=
   '0' |
   '1' |
   '2' |
   '3' |
   '4' |
   '5' |
   '6' |
   '7' |
   '8' |
   '9' 

digit_sequence ::=
   digit ART_C_6 

directive ::=
   'ID' 

domain_type ::=
   type_identifier 

else_part ::=
   'else' statement 

entire_variable ::=
   variable_identifier 

enumerated_type ::=
   '(' identifier_list ')' 

expression ::=
   simple_expression |
   simple_expression relational_operator simple_expression 

factor ::=
   variable_access |
   unsigned_constant |
   function_designator |
   set_constructor |
   '(' expression ')' |
   'not' factor 

field_designator ::=
   record_variable '.' field_specifier |
   field_designator_identifier 

field_designator_identifier ::=
   identifier 

field_identifier ::=
   'field_ID' 

field_list ::=
   # |
   variant_part |
   variant_part ';' |
   fixed_part |
   fixed_part ';' |
   fixed_part ';' variant_part |
   fixed_part ';' variant_part ';' 

field_specifier ::=
   field_identifier 

file_type ::=
   'file' 'of' component_type 

file_variable ::=
   variable_access 

final_value ::=
   expression 

fixed_part ::=
   record_section ART_C_7 

for_statement ::=
   'for' control_variable ':=' initial_value 'to' final_value 'do' statement |
   'for' control_variable ':=' initial_value 'downto' final_value 'do' statement 

formal_parameter_list ::=
   '(' formal_parameter_section ART_C_8 ')' 

formal_parameter_section ::=
   value_parameter_specification |
   variable_parameter_specification |
   procedural_parameter_specification |
   functional_parameter_specification 

fractional_part ::=
   digit_sequence 

function_block ::=
   block 

function_declaration ::=
   function_heading ';' directive |
   function_identification ';' function_block |
   function_heading ';' function_block 

function_designator ::=
   function_identifier |
   function_identifier actual_parameter_list 

function_heading ::=
   'function' identifier ':' result_type |
   'function' identifier formal_parameter_list ':' result_type 

function_identification ::=
   'function' function_identifier 

function_identifier ::=
   'function_ID' 

functional_parameter_specification ::=
   function_heading 

goto_statement ::=
   'goto' label 

identified_variable ::=
   pointer_variable '^' 

identifier ::=
   'ID' 

identifier_list ::=
   identifier ART_C_9 

if_statement ::=
   'if' Boolean_expression 'then' statement |
   'if' Boolean_expression 'then' statement else_part 

index_expression ::=
   expression 

index_type ::=
   ordinal_type 

index_type_specification ::=
   identifier '..' identifier ':' ordinal_type_identifier 

indexed_variable ::=
   array_variable '[' index_expression ART_C_10 ']' 

initial_value ::=
   expression 

label ::=
   digit_sequence 

label_declaration_part ::=
   # |
   'label' label ART_C_11 ';' 

letter ::=
   'a' |
   'b' |
   'c' |
   'd' |
   'e' |
   'f' |
   'g' |
   'h' |
   'i' |
   'j' |
   'k' |
   'l' |
   'm' |
   'n' |
   'o' |
   'p' |
   'q' |
   'r' |
   's' |
   't' |
   'u' |
   'v' |
   'w' |
   'x' |
   'y' |
   'z' 

member_designator ::=
   expression |
   expression '..' expression 

multiplying_operator ::=
   '*' |
   '/' |
   'div' |
   'mod' |
   'and' 

new_ordinal_type ::=
   enumerated_type |
   subrange_type 

new_pointer_type ::=
   '^' domain_type 

new_structured_type ::=
   unpacked_structured_type |
   'packed' unpacked_structured_type 

new_type ::=
   new_ordinal_type |
   new_structured_type |
   new_pointer_type 

ordinal_type ::=
   new_ordinal_type |
   ordinal_type_identifier 

ordinal_type_identifier ::=
   type_identifier 

packed_conformant_array_schema ::=
   'packed' 'array' '[' index_type_specification ']' 'of' type_identifier 

pointer_type ::=
   new_pointer_type |
   pointer_type_identifier 

pointer_type_identifier ::=
   type_identifier 

pointer_variable ::=
   variable_access 

procedural_parameter_specification ::=
   procedure_heading 

procedure_and_function_declaration_part ::=
   ART_C_12 

procedure_block ::=
   block 

procedure_declaration ::=
   procedure_heading ';' directive |
   procedure_identification ';' procedure_block |
   procedure_heading ';' procedure_block 

procedure_heading ::=
   'procedure' identifier |
   'procedure' identifier formal_parameter_list 

procedure_identification ::=
   'procedure' procedure_identifier 

procedure_identifier ::=
   'procedure_ID' |
   'write' |
   'writeln' |
   'read' |
   'readln' 

procedure_statement ::=
   procedure_identifier read_parameter_list |
   procedure_identifier readln_parameter_list |
   procedure_identifier write_parameter_list |
   procedure_identifier writeln_parameter_list |
   procedure_identifier |
   procedure_identifier actual_parameter_list 

//program ::= program_heading ';' program_block '.' 

program_block ::=
   block 

program_heading ::=
   'program' identifier |
   'program' identifier '(' program_parameter_list ')' 

program_parameter_list ::=
   identifier_list 

read_parameter_list ::=
   '(' variable_access ART_C_13 ')' |
   '(' file_variable ',' variable_access ART_C_13 ')' 

readln_parameter_list ::=
   # |
   '(' file_variable ART_C_14 ')' |
   '(' variable_access ART_C_14 ')' 

real_type_identifier ::=
   type_identifier 

record_section ::=
   identifier_list ':' type_denoter 

record_type ::=
   'record' field_list 'end' 

record_variable ::=
   variable_access 

record_variable_list ::=
   record_variable ART_C_15 

relational_operator ::=
   '=' |
   '<>' |
   '<' |
   '>' |
   '<=' |
   '>=' |
   'in' 

repeat_statement ::=
   'repeat' statement_sequence 'until' Boolean_expression 

repetitive_statement ::=
   repeat_statement |
   while_statement |
   for_statement 

result_type ::=
   simple_type_identifier |
   pointer_type_identifier 

scale_factor ::=
   digit_sequence |
   sign digit_sequence 

set_constructor ::=
   '[' ']' |
   '[' member_designator ART_C_16 ']' 

set_type ::=
   'set' 'of' base_type 

sign ::=
   '+' |
   '-' 

signed_integer ::=
   unsigned_integer |
   sign unsigned_integer 

signed_number ::=
   signed_integer |
   signed_real 

signed_real ::=
   unsigned_real |
   sign unsigned_real 

simple_expression ::=
   term ART_C_17 |
   sign term ART_C_17 

simple_statement ::=
   # |
   assignment_statement |
   procedure_statement |
   goto_statement 

simple_type ::=
   ordinal_type |
   real_type_identifier 

simple_type_identifier ::=
   type_identifier 

special_symbol ::=
   '+' |
   '-' |
   '*' |
   '/' |
   '=' |
   '<' |
   '>' |
   '[' |
   ']' |
   '.' |
   ',' |
   ':' |
   ';' |
   '^' |
   '(' |
   ')' |
   '<>' |
   '<=' |
   '>=' |
   ':=' |
   '..' |
   word_symbol 

statement ::=
   simple_statement |
   structured_statement |
   label ':' simple_statement |
   label ':' structured_statement 

statement_part ::=
   compound_statement 

statement_sequence ::=
   statement ART_C_18 

structured_statement ::=
   compound_statement |
   conditional_statement |
   repetitive_statement |
   with_statement 

structured_type ::=
   new_structured_type |
   structured_type_identifier 

structured_type_identifier ::=
   type_identifier 

subrange_type ::=
   constant '..' constant 

tag_field ::=
   identifier 

tag_type ::=
   ordinal_type_identifier 

term ::=
   factor ART_C_19 

type_definition ::=
   identifier '=' type_denoter 

type_definition_part ::=
   # |
   'type' type_definition ';' ART_C_20 

type_denoter ::=
   type_identifier |
   new_type 

type_identifier ::=
   'type_ID' 

unpacked_conformant_array_schema ::=
   'array' '[' index_type_specification ART_C_21 ']' 'of' type_identifier |
   'array' '[' index_type_specification ART_C_21 ']' 'of' conformant_array_schema 

unpacked_structured_type ::=
   array_type |
   record_type |
   set_type |
   file_type 

unsigned_constant ::=
   unsigned_number |
   character_string |
   constant_identifier |
   'nil' 

unsigned_integer ::=
   'INTEGER' 

unsigned_number ::=
   unsigned_integer |
   unsigned_real 

unsigned_real ::=
   'REAL' 

value_conformant_array_specification ::=
   identifier_list ':' conformant_array_schema 

value_parameter_specification ::=
   identifier_list ':' type_identifier 

variable_access ::=
   entire_variable |
   component_variable |
   identified_variable |
   buffer_variable 

variable_conformant_array_specification ::=
   'var' identifier_list ':' conformant_array_schema 

variable_declaration ::=
   identifier_list ':' type_denoter 

variable_declaration_part ::=
   # |
   'var' variable_declaration ';' ART_C_22 

variable_identifier ::=
   'variable_ID' 

variable_parameter_specification ::=
   'var' identifier_list ':' type_identifier 

variant ::=
   case_constant_list ':' '(' field_list ')' 

variant_part ::=
   'case' variant_selector 'of' variant ART_C_23 

variant_selector ::=
   tag_type |
   tag_field ':' tag_type 

while_statement ::=
   'while' Boolean_expression 'do' statement 

with_statement ::=
   'with' record_variable_list 'do' statement 

word_symbol ::=
   'and' |
   'array' |
   'begin' |
   'case' |
   'const' |
   'div' |
   'do' |
   'downto' |
   'else' |
   'end' |
   'file' |
   'for' |
   'function' |
   'goto' |
   'if' |
   'in' |
   'label' |
   'mod' |
   'nil' |
   'not' |
   'of' |
   'or' |
   'packed' |
   'procedure' |
   'program' |
   'record' |
   'repeat' |
   'set' |
   'then' |
   'to' |
   'type' |
   'until' |
   'var' |
   'while' |
   'with' 

write_parameter ::=
   expression |
   expression ':' expression |
   expression ':' expression ':' expression 

write_parameter_list ::=
   '(' write_parameter ART_C_24 ')' |
   '(' file_variable ',' write_parameter ART_C_24 ')' 

writeln_parameter_list ::=
   # |
   '(' file_variable ART_C_25 ')' |
   '(' write_parameter ART_C_25 ')' 

 