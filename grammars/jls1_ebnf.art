
Goal::=
  CompilationUnit  

// Generated by gramex V1.2 from 'java_language_specification_1.raw' on Sep  1 2006 at 10:38:05
// Command line: C:\cg\dev\gramex\gramex.exe -i java_language_specification_1.raw

// Start of provenance

// CONVERTED TO ART FORMAT AUGUST 2012 by EAS

// java_language_specification_1.raw - the grammar from Chapter 19 of the
// Java Language Specification (First Edition)

// 1. This is the grammar from Chapter 19 (pages 433--454) of 'The Java
// Language Specification (First Edition)' by James Gosling, Bill Joy and
// Guy L. Steele, Addison Wesley, (1996) ISBN: 0201634511.

// 2. This file was created by opening the HTML version of the book which
// is online at http://java.sun.com/docs/books/jls/ using Mozilla Firefox
// 1.5.0.6, opening chapter 19, selecting all text and then pasting it
// into Emacs.

// 3. Most of section 19.1 was deleted.

// 4. Tabs were changed to eight spaces.

// 5. Double-new-lines within grammar rules were removed.

// 6. A new line was inserted before section headers 19.8.1 and 19.9.1.

// 7. The result was proof read against the PDF version of the book,
// accessed from the same URL as above.

// 8. This grammar is Copyright © 1996 Sun Microsystems, Inc. We contacted
// Sun to see if it would be acceptable to them to post this material and
// received this kind message from Gilad Bracha, co-author of editions
// two and three of the Java Language Specification.

//   Adrian,

//     Feel free to post the grammar with an appropriate acknowledgement of
//     copyright. I'm pretty sure Sun will not come after you for your good 
//     work.

// If you intend to make use of this grammar, you must ensure you have
// met Sun's terms and conditions on the use of the Java Language
// Specification. Please contact Sun directly if in doubt.

// 9. You can process this file with the gramex tool to make something
// close to a Bison input file, and use the gramconv tool to convert EBNF
// constructs to pure BNF, and to translate to a variety of other
// formats.

// 10. For tool and grammar downloads, see the Royal Holloway Compilers
// Group homepage under http://www.cs.rhul.ac.uk, or contact us at
// A.Johnstone@rhul.ac.uk or E.Scott@rhul.ac.uk.

// 11. Please don't change this file.

//         Adrian Johnstone and Elizabeth Scott, 1 September 2006

// End of provenance

// Contents | Prev | Next | Index         Java Language Specification
// First Edition

// CHAPTER 19
// LALR(1) Grammar

// This chapter presents a grammar for Java. The grammar has been
// mechanically checked to insure that it is LALR(1).

// ... Omitted text ...


// The remaining sections of this chapter constitute a LALR(1) grammar
// for Java syntax, in which the five problems described above have been
// solved.

// 19.2 Productions from §2.3: The Syntactic Grammar

//java1()(Goal)

// 19.3 Productions from §3: Lexical Structure

Literal::=
  'INTEGER' |
  'REAL' |
  'CHAR' |
  'STRING' |
  'true' | 'false' |
  'null'  

// 19.4 Productions from §4: Types, Values, and Variables

Type::=
  PrimitiveType |
  ReferenceType  

PrimitiveType::=
  NumericType |
  'boolean'  

NumericType::=
  IntegralType |
  FloatingPointType  

IntegralType::=
  'byte' | 'short' | 'int' | 'long' | 'char'  

FloatingPointType::=
  'float' | 'double'  

ReferenceType::=
  ClassOrInterfaceType |
  ArrayType  

ClassOrInterfaceType::=
  Name  

ClassType::=
  ClassOrInterfaceType  

InterfaceType::=
  ClassOrInterfaceType  

ArrayType::=
  PrimitiveType '[' ']' |
  Name '[' ']' |
  ArrayType '[' ']'  

// 19.5 Productions from §6::= Names

Name::=
  SimpleName |
  QualifiedName  

SimpleName::=
  'ID'  

QualifiedName::=
  Name '.' 'ID'  

// 19.6 Productions from §7: Packages

CompilationUnit::=
  PackageDeclaration? ImportDeclarations? TypeDeclarations?  

ImportDeclarations::=
  ImportDeclaration |
  ImportDeclarations ImportDeclaration  

TypeDeclarations::=
  TypeDeclaration |
  TypeDeclarations TypeDeclaration  

PackageDeclaration::=
  'package' Name ';'  

ImportDeclaration::=
  SingleTypeImportDeclaration |
  TypeImportOnDemandDeclaration  

SingleTypeImportDeclaration::=
  'import' Name ';'  

TypeImportOnDemandDeclaration::=
  'import' Name '.' '*' ';'  

TypeDeclaration::=
  ClassDeclaration |
  InterfaceDeclaration |
  ';'  

// 19.7 Productions Used Only in the LALR(1) Grammar

Modifiers::=
  Modifier |
  Modifiers Modifier  

Modifier::=
  'public' | 'protected' | 'private' |
  'static' |
  'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile'  

// 19.8 Productions from §8: Classes

// 19.8.1 Productions from §8.1: Class Declaration

ClassDeclaration::=
  Modifiers? 'class' 'ID' Super? Interfaces? ClassBody  

Super::=
  'extends' ClassType  

Interfaces::=
  'implements' InterfaceTypeList  

InterfaceTypeList::=
  InterfaceType |
  InterfaceTypeList ',' InterfaceType  

ClassBody::=
  '{' ClassBodyDeclarations? '}'  

ClassBodyDeclarations::=
  ClassBodyDeclaration |
  ClassBodyDeclarations ClassBodyDeclaration  

ClassBodyDeclaration::=
  ClassMemberDeclaration |
  StaticInitializer |
  ConstructorDeclaration  

ClassMemberDeclaration::=
  FieldDeclaration |
  MethodDeclaration  

// 19.8.2 Productions from §8.3: Field Declarations

FieldDeclaration::=
  Modifiers? Type VariableDeclarators ';'  

VariableDeclarators::=
  VariableDeclarator |
  VariableDeclarators ',' VariableDeclarator  

VariableDeclarator::=
  VariableDeclaratorId |
  VariableDeclaratorId '=' VariableInitializer  

VariableDeclaratorId::=
  'ID' |
  VariableDeclaratorId '[' ']'  

VariableInitializer::=
  Expression |
  ArrayInitializer  

// 19.8.3 Productions from §8.4::= Method Declarations

MethodDeclaration::=
  MethodHeader MethodBody  

MethodHeader::=
  Modifiers? Type MethodDeclarator Throws? |
  Modifiers? 'void' MethodDeclarator Throws?  

MethodDeclarator::=
  'ID' '(' FormalParameterList? ')' |
  MethodDeclarator '[' ']'  

FormalParameterList::=
  FormalParameter |
  FormalParameterList ',' FormalParameter  

FormalParameter::=
  Type VariableDeclaratorId  

Throws::=
  'throws' ClassTypeList  

ClassTypeList::=
  ClassType |
  ClassTypeList ',' ClassType  

MethodBody::=
  Block |
  ';'  

// 19.8.4 Productions from §8.5: Static Initializers

StaticInitializer::=
  'static' Block  

// 19.8.5 Productions from §8.6: Constructor Declarations

ConstructorDeclaration::=
  Modifiers? ConstructorDeclarator Throws? ConstructorBody  

ConstructorDeclarator::=
  SimpleName '(' FormalParameterList? ')'  

ConstructorBody::=
  '{' ExplicitConstructorInvocation? BlockStatements? '}'  

ExplicitConstructorInvocation::=
  'this' '(' ArgumentList? ')' ';' |
  'super' '(' ArgumentList? ')' ';'  

// 19.9 Productions from §9: Interfaces

// 19.9.1 Productions from §9.1: Interface Declarations

InterfaceDeclaration::=
  Modifiers? 'interface' 'ID' ExtendsInterfaces? InterfaceBody  

ExtendsInterfaces::=
  'extends' InterfaceType |
  ExtendsInterfaces ',' InterfaceType  

InterfaceBody::=
  '{' InterfaceMemberDeclarations? '}'  

InterfaceMemberDeclarations::=
  InterfaceMemberDeclaration |
  InterfaceMemberDeclarations InterfaceMemberDeclaration  

InterfaceMemberDeclaration::=
  ConstantDeclaration |
  AbstractMethodDeclaration  

ConstantDeclaration::=
  FieldDeclaration  

AbstractMethodDeclaration::=
  MethodHeader ';'  

// 19.10 Productions from §10: Arrays

ArrayInitializer::=
  '{' VariableInitializers? ','? '}'  

VariableInitializers::=
  VariableInitializer |
  VariableInitializers ',' VariableInitializer  

// 19.11 Productions from §14: Blocks and Statements
Block::=
  '{' BlockStatements? '}'  

BlockStatements::=
  BlockStatement |
  BlockStatements BlockStatement  

BlockStatement::=
  LocalVariableDeclarationStatement |
  Statement  

LocalVariableDeclarationStatement::=
  LocalVariableDeclaration ';'  

LocalVariableDeclaration::=
  Type VariableDeclarators  

Statement::=
  StatementWithoutTrailingSubstatement |
  LabeledStatement |
  IfThenStatement |
  IfThenElseStatement |
  WhileStatement |
  ForStatement  

StatementNoShortIf::=
  StatementWithoutTrailingSubstatement |
  LabeledStatementNoShortIf |
  IfThenElseStatementNoShortIf |
  WhileStatementNoShortIf |
  ForStatementNoShortIf  

StatementWithoutTrailingSubstatement::=
  Block |
  EmptyStatement |
  ExpressionStatement |
  SwitchStatement |
  DoStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  SynchronizedStatement |
  ThrowStatement |
  TryStatement  

EmptyStatement::=
  ';'  

LabeledStatement::=
  'ID' ':' Statement  

LabeledStatementNoShortIf::=
  'ID' ':' StatementNoShortIf  

ExpressionStatement::=
  StatementExpression ';'  

StatementExpression::=
  Assignment |
  PreIncrementExpression |
  PreDecrementExpression |
  PostIncrementExpression |
  PostDecrementExpression |
  MethodInvocation |
  ClassInstanceCreationExpression  

IfThenStatement::=
  'if' '(' Expression ')' Statement  

IfThenElseStatement::=
  'if' '(' Expression ')' StatementNoShortIf 'else' Statement  

IfThenElseStatementNoShortIf::=
  'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf  

SwitchStatement::=
  'switch' '(' Expression ')' SwitchBlock  

SwitchBlock::=
  '{' SwitchBlockStatementGroups? SwitchLabels? '}'  

SwitchBlockStatementGroups::=
  SwitchBlockStatementGroup |
  SwitchBlockStatementGroups SwitchBlockStatementGroup  

SwitchBlockStatementGroup::=
  SwitchLabels BlockStatements  

SwitchLabels::=
  SwitchLabel |
  SwitchLabels SwitchLabel  

SwitchLabel::=
  'case' ConstantExpression ':' |
  'default' ':'  

WhileStatement::=
  'while' '(' Expression ')' Statement  

WhileStatementNoShortIf::=
  'while' '(' Expression ')' StatementNoShortIf  

DoStatement::=
  'do' Statement 'while' '(' Expression ')' ';'  

ForStatement::=
  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' 
  Statement  

ForStatementNoShortIf::=
  'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')' 
  StatementNoShortIf  

ForInit::=
  StatementExpressionList |
  LocalVariableDeclaration  

ForUpdate::=
  StatementExpressionList  

StatementExpressionList::=
  StatementExpression |
  StatementExpressionList ',' StatementExpression  

BreakStatement::=
  'break' 'ID'? ';'  

ContinueStatement::=
  'continue' 'ID'? ';'  

ReturnStatement::=
  'return' Expression? ';'  

ThrowStatement::=
  'throw' Expression ';'  

SynchronizedStatement::=
  'synchronized' '(' Expression ')' Block  

TryStatement::=
  'try' Block Catches |
  'try' Block Catches? Finally  

Catches::=
  CatchClause |
  Catches CatchClause  

CatchClause::=
  'catch' '(' FormalParameter ')' Block  

Finally::=
  'finally' Block  

// 19.12 Productions from §15: Expressions

Primary::=
  PrimaryNoNewArray |
  ArrayCreationExpression  

PrimaryNoNewArray::=
  Literal |
  'this' |
  '(' Expression ')' |
  ClassInstanceCreationExpression |
  FieldAccess |
  MethodInvocation |
  ArrayAccess  

ClassInstanceCreationExpression::=
  'new' ClassType '(' ArgumentList? ')'  

ArgumentList::=
  Expression |
  ArgumentList ',' Expression  

ArrayCreationExpression::=
  'new' PrimitiveType DimExprs Dims? |
  'new' ClassOrInterfaceType DimExprs Dims?  

DimExprs::=
  DimExpr |
  DimExprs DimExpr  

DimExpr::=
  '[' Expression ']'  

Dims::=
  '[' ']' |
  Dims '[' ']'  

FieldAccess::=
  Primary '.' 'ID' |
  'super' '.' 'ID'  

MethodInvocation::=
  Name '(' ArgumentList? ')' |
  Primary '.' 'ID' '(' ArgumentList? ')' |
  'super' '.' 'ID' '(' ArgumentList? ')'  

ArrayAccess::=
  Name '[' Expression ']' |
  PrimaryNoNewArray '[' Expression ']'  

PostfixExpression::=
  Primary |
  Name |
  PostIncrementExpression |
  PostDecrementExpression  

PostIncrementExpression::=
  PostfixExpression '++'  

PostDecrementExpression::=
  PostfixExpression '--'  

UnaryExpression::=
  PreIncrementExpression |
  PreDecrementExpression |
  '+' UnaryExpression |
  '-' UnaryExpression |
  UnaryExpressionNotPlusMinus  

PreIncrementExpression::=
  '++' UnaryExpression  

PreDecrementExpression::=
  '--' UnaryExpression  

UnaryExpressionNotPlusMinus::=
  PostfixExpression |
  '~' UnaryExpression |
  '!' UnaryExpression |
  CastExpression  

CastExpression::=
  '(' PrimitiveType Dims? ')' UnaryExpression |
  '(' Expression ')' UnaryExpressionNotPlusMinus |
  '(' Name Dims ')' UnaryExpressionNotPlusMinus  

MultiplicativeExpression::=
  UnaryExpression |
  MultiplicativeExpression '*' UnaryExpression |
  MultiplicativeExpression '/' UnaryExpression |
  MultiplicativeExpression '%' UnaryExpression  

AdditiveExpression::=
  MultiplicativeExpression |
  AdditiveExpression '+' MultiplicativeExpression |
  AdditiveExpression '-' MultiplicativeExpression  

ShiftExpression::=
  AdditiveExpression |
  ShiftExpression '<<' AdditiveExpression |
  ShiftExpression '>>' AdditiveExpression |
  ShiftExpression '>>>' AdditiveExpression  

RelationalExpression::=
  ShiftExpression |
  RelationalExpression '<' ShiftExpression |
  RelationalExpression '>' ShiftExpression |
  RelationalExpression '<=' ShiftExpression |
  RelationalExpression '>=' ShiftExpression |
  RelationalExpression 'instanceof' ReferenceType  

EqualityExpression::=
  RelationalExpression |
  EqualityExpression '==' RelationalExpression |
  EqualityExpression '!=' RelationalExpression  

AndExpression::=
  EqualityExpression |
  AndExpression '&' EqualityExpression  

ExclusiveOrExpression::=
  AndExpression |
  ExclusiveOrExpression '^' AndExpression  

InclusiveOrExpression::=
  ExclusiveOrExpression |
  InclusiveOrExpression '|' ExclusiveOrExpression  

ConditionalAndExpression::=
  InclusiveOrExpression |
  ConditionalAndExpression '&&' InclusiveOrExpression  

ConditionalOrExpression::=
  ConditionalAndExpression |
  ConditionalOrExpression '||' ConditionalAndExpression  

ConditionalExpression::=
  ConditionalOrExpression |
  ConditionalOrExpression '?' Expression ':' ConditionalExpression  

AssignmentExpression::=
  ConditionalExpression |
  Assignment  

Assignment::=
  LeftHandSide AssignmentOperator AssignmentExpression  

LeftHandSide::=
  Name |
  FieldAccess |
  ArrayAccess  

AssignmentOperator::=
  '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|='  

Expression::=
  AssignmentExpression  

ConstantExpression::=
  Expression  

// Contents | Prev | Next | Index         Java Language Specification
// First Edition

// Java Language Specification (HTML generated by Suzette Pelouch on April 03, 1998)
// Copyright © 1996 Sun Microsystems, Inc. All rights reserved
// Please send any comments or corrections via our feedback form 
 