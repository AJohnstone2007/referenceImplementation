

CompilationUnit::=
  ( 'package' QualifiedIdentifier ';' )?  ( ImportDeclaration )*  
  ( TypeDeclaration )*   

// Generated by gramex V1.2 from 'java_language_specification_2.raw' on Sep  1 2006 at 10:38:05
// Command line: C:\cg\dev\gramex\gramex.exe -i -e java_language_specification_2.raw

// Start of provenance

// PUT INTO ART FORMAT AUGUST 2012 by EAS
// also some errors fixed where the raw -> gex hasn't worked propery
// the original uses bold to distinguish between the grammar terminals [,(
// and the corresponding ebnf meta symbols

// java_language_specification_2.raw - the grammar from Chapter 18 of the
// Java Language Specification, Second Edition

// 1. This is the grammar from Chapter 18 (pages 449--456) of 'The Java
// Language Specification, Second Edition' by by Bill Joy, Guy Steele,
// James Gosling, Gilad Bracha, Addison Wesley, (2000) ISBN: 0201310082.

// 2. This file was created by opening the HTML version of the book which
// is online at http://java.sun.com/docs/books/jls/ using Mozilla Firefox
// 1.5.0.6, opening chapter 18, selecting all text and then pasting it
// into Emacs.

// 3. Tabs were changed to eight spaces.

// 4. Three trivial typos were fixed:

//    (a) In rule Expression2, the space between the left had side 
//        nonterminal and its colon (:) delimiter was removed.

//    (b) In rule BlockStatement, the space between the left had side 
//        nonterminal and its colon (:) delimiter was removed.

//    (c) In rule SwitchLabel, the production 'default:' was changed to 
//        'default :'.

// We've notified Sun of these typos: they may be fixed in later versions of the
// online documents.

// 5. All instances of '[' were replaced with ' [ ', similarly for ], (,
// ), {, } and |.  This is because our gramex (grammar extract) tool
// requires space delimiting of grammar elements. Delimiting | in this
// way damages terminals such as |= and || which must be repaired at the
// next stage.

// 6. The result was proof read against the PDF version of the book,
// accessed from the same URL as above.

// 7. This grammar is Copyright Â© 1996 Sun Microsystems, Inc. I contacted
// Sun to see if it would be acceptable to them to post this material and
// received this kind message from Gilad Bracha, co-author of editions
// two and three of the Java Language Specification.

//   Adrian,

//     Feel free to post the grammar with an appropriate acknowledgement of
//     copyright. I'm pretty sure Sun will not come after you for your good 
//     work.

// If you intend to make use of this grammar, you must ensure you have
// met Sun's terms and conditions on the use of the Java Language
// Specification. Please contact Sun directly if in doubt.

// 8. You can process this file with the gramex tool to make something
// close to a Bison input file, and use the gramconv tool to convert EBNF
// constructs to pure BNF, and to translate to a variety of other
// formats.

// 9. For tool and grammar downloads, see the Royal Holloway Compilers
// Group homepage under http://www.cs.rhul.ac.uk, or contact us at
// A.Johnstone@rhul.ac.uk or E.Scott@rhul.ac.uk.

// 10. Please don't change this file.

//         Adrian Johnstone and Elizabeth Scott, 1 September 2006

// End of provenance

// Contents  |  Prev  |  Next  |  Index         Java Language Specification
// Second Edition

// CHAPTER 18
// Syntax

// This chapter presents a grammar for the Java programming language.

// The grammar presented piecemeal in the preceding chapters is much
// better for exposition, but it is not ideally suited as a basis for a
// parser. The grammar presented in this chapter is the basis for the
// reference implementation.

// The grammar below uses the following BNF-style conventions:

//     *  [ x ]  denotes zero or one occurrences of x.
//     *  { x }  denotes zero or more occurrences of x.
//     * x  |  y means one of either x or y. 

// 18.1 The Grammar of the Java Programming Language

//Java2ART()(CompilationUnit)

Identifier::=
  'ID'  

QualifiedIdentifier::=
  Identifier (  '.' Identifier )*   

Literal::=
  'INTEGER' |
  'REAL' |
  'CHAR' |
  'STRING' |
  'true' | 'false' |
  'null'  

Expression::=
  Expression1 ( AssignmentOperator Expression )?   
//EAS  changed this:  Expression1 [  AssignmentOperator Expression1 ]  ]   

AssignmentOperator::=
  '=' |
  '+=' |
  '-=' |
  '*=' |
  '/=' |
  '&=' |
  '|=' |
  '^=' |
  '%=' |
  '<<=' |
  '>>=' |
  '>>>='  

Type::=
  Identifier (  '.' Identifier )*  BracketsOpt |
  BasicType  

StatementExpression::=
  Expression  

ConstantExpression::=
  Expression  

Expression1::=
  Expression2 ( Expression1Rest )?   

Expression1Rest::=
  ( '?' Expression ':' Expression1 )?  

Expression2::=
  Expression3 ( Expression2Rest )?  

Expression2Rest::=
  (  Infixop Expression3 )*  |
  Expression3 'instanceof' Type  

Infixop::=
  '||'  |
  '&&' |
  '|'  |
  '^' |
  '&' |
  '==' |
  '!=' |
  '<' |
  '>' |
  '<=' |
  '>=' |
  '<<' |
  '>>' |
  '>>>' |
  '+' |
  '-' |
  '*' |
  '/' |
  '%'  

Expression3::=
  PrefixOp Expression3 |
//  '('  'Expr' |  Type ')'  Expression3 |
  '('  Expression |  Type ')'  Expression3 |
  Primary (  Selector )*  (  PostfixOp )*   

Primary::=
  '(' Expression ')'  |
  'this' ( Arguments )?  |
  'super' SuperSuffix |
  Literal |
  'new' Creator |
  Identifier ( '.' Identifier )*  ( IdentifierSuffix )?  |
//White space issues here
  BasicType BracketsOpt '.' 'class' |
  'void.class'  

IdentifierSuffix::=
  '['  (  ']'  BracketsOpt '.' 'class' |  Expression ']'  )  |
  Arguments |
  '.' (  'class' |  'this' |  'super' Arguments |  'new' InnerCreator )   

PrefixOp::=
  '++' |
  '--' |
  '!' |
  '~' |
  '+' |
  '-'  

PostfixOp::=
  '++' |
  '--'  

Selector::=
  '.' Identifier ( Arguments )?  |
  '.' 'this' |
  '.' 'super' SuperSuffix |
  '.' 'new' InnerCreator |
  '['  Expression ']'   

SuperSuffix::=
  Arguments |
  '.' Identifier ( Arguments )?   

BasicType::=
  'byte' |
  'short' |
  'char' |
  'int' |
  'long' |
  'float' |
  'double' |
  'boolean'  

ArgumentsOpt::=
  ( Arguments )?  

Arguments::=
  '('  ( Expression (  ',' Expression )* )?  ')'   

BracketsOpt::=
  (  '['  ']'  )*   

Creator::=
  QualifiedIdentifier (  ArrayCreatorRest |  ClassCreatorRest )   

InnerCreator::=
  Identifier ClassCreatorRest  

ArrayCreatorRest::=
  '['  (  ']'  BracketsOpt ArrayInitializer |  Expression ']'  
             (  '['  Expression ']'  )*  BracketsOpt )  

ClassCreatorRest::=
  Arguments ( ClassBody )?   

ArrayInitializer::=
  '{' ( VariableInitializer (  ',' VariableInitializer )*  ( ',' )?  )?  '}'   

VariableInitializer::=
  ArrayInitializer |
  Expression  

ParExpression::=
  '('  Expression ')'   

Block::=
  '{'  BlockStatements '}'   

BlockStatements::=
  (  BlockStatement )*   

BlockStatement::=
  LocalVariableDeclarationStatement |
  ClassOrInterfaceDeclaration |
  ( Identifier ':' )?  Statement  

LocalVariableDeclarationStatement::=
  ( 'final' )? Type VariableDeclarators ';'  

Statement::=
  Block |
  'if' ParExpression Statement ( 'else' Statement )? |
  'for' '(' (ForInit)? ';' (Expression)?  ';' (ForUpdate)? ')'  Statement |
//  'for' '(' 'ForInitOpt' ';' (Expression)?  ';' 'ForUpdateOpt' ')' Statement |
  'while' ParExpression Statement |
  'do' Statement 'while' ParExpression ';' |
  'try' Block (  Catches |  ( Catches )?  'finally' Block )  |
  'switch' ParExpression '{'  SwitchBlockStatementGroups '}'  |
  'synchronized' ParExpression Block |
  'return' (Expression)?  ';' |
  'throw' Expression ';' |
  'break' (Identifier)?  |
  'continue' (Identifier)?  |
  ';' |
  ExpressionStatement |
  Identifier ':' Statement  

// added this rule
ExpressionStatement ::= StatementExpression ';'  


Catches::=
  CatchClause ( CatchClause )*   

CatchClause::=
  'catch' '('  FormalParameter ')'  Block  

SwitchBlockStatementGroups::=
  ( SwitchBlockStatementGroup )*   

SwitchBlockStatementGroup::=
  SwitchLabel BlockStatements  

SwitchLabel::=
  'case' ConstantExpression ':' |
  'default' ':'  

MoreStatementExpressions::=
  (  ',' StatementExpression )*   

ForInit::=
  StatementExpression MoreStatementExpressions |
  ( 'final' )?  Type VariableDeclarators  

ForUpdate::=
  StatementExpression MoreStatementExpressions  

ModifiersOpt::=
  ( Modifier )*   

Modifier::=
  'public' |
  'protected' |
  'private' |
  'static' |
  'abstract' |
  'final' |
  'native' |
  'synchronized' |
  'transient' |
  'volatile' |
  'strictfp'  

VariableDeclarators::=
  VariableDeclarator ( ',' VariableDeclarator )*   

VariableDeclaratorsRest::=
  VariableDeclaratorRest (  ',' VariableDeclarator )*   

ConstantDeclaratorsRest::=
  ConstantDeclaratorRest (  ',' ConstantDeclarator )*  

VariableDeclarator::=
  Identifier VariableDeclaratorRest  

ConstantDeclarator::=
  Identifier ConstantDeclaratorRest  

VariableDeclaratorRest::=
  BracketsOpt ( '=' VariableInitializer )?   

ConstantDeclaratorRest::=
  BracketsOpt '=' VariableInitializer  

VariableDeclaratorId::=
  Identifier BracketsOpt  

//CompilationUnit::=
//  ( 'package' QualifiedIdentifier ';' )?  ( ImportDeclaration )*  
//  ( TypeDeclaration )*   

ImportDeclaration::=
  'import' Identifier ( '.' Identifier )*  ( '.' '*' )?  ';'  

TypeDeclaration::=
  ClassOrInterfaceDeclaration |
  ';'  

ClassOrInterfaceDeclaration::=
  ModifiersOpt ( ClassDeclaration |  InterfaceDeclaration )   

ClassDeclaration::=
  'class' Identifier ( 'extends' Type )? ( 'implements' TypeList )? ClassBody  

InterfaceDeclaration::=
  'interface' Identifier ( 'extends' TypeList )?  InterfaceBody  

TypeList::=
  Type ( ',' Type )*  

ClassBody::=
  '{'  ( ClassBodyDeclaration )*  '}'   

InterfaceBody::=
  '{' ( InterfaceBodyDeclaration )*  '}'   

ClassBodyDeclaration::=
  ';' |
  ( 'static' )?  Block |
  ModifiersOpt MemberDecl  

MemberDecl::=
  MethodOrFieldDecl |
  'void' Identifier MethodDeclaratorRest |
  Identifier ConstructorDeclaratorRest |
  ClassOrInterfaceDeclaration  

MethodOrFieldDecl::=
  Type Identifier MethodOrFieldRest  

MethodOrFieldRest::=
//EAS changed   VariableDeclaratorRest
  VariableDeclaratorsRest |
  MethodDeclaratorRest  

InterfaceBodyDeclaration::=
  ';' |
  ModifiersOpt InterfaceMemberDecl  

InterfaceMemberDecl::=
  InterfaceMethodOrFieldDecl |
  'void' Identifier VoidInterfaceMethodDeclaratorRest |
  ClassOrInterfaceDeclaration  

InterfaceMethodOrFieldDecl::=
  Type Identifier InterfaceMethodOrFieldRest  

InterfaceMethodOrFieldRest::=
  ConstantDeclaratorsRest ';' |
  InterfaceMethodDeclaratorRest  

MethodDeclaratorRest::=
  FormalParameters BracketsOpt ( 'throws' QualifiedIdentifierList )?  
       (  MethodBody |  ';' )   

VoidMethodDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )? ( MethodBody | ';' )  

InterfaceMethodDeclaratorRest::=
  FormalParameters BracketsOpt ( 'throws' QualifiedIdentifierList )? ';'  

VoidInterfaceMethodDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )? ';'  

ConstructorDeclaratorRest::=
  FormalParameters ( 'throws' QualifiedIdentifierList )?  MethodBody  

QualifiedIdentifierList::=
  QualifiedIdentifier ( ',' QualifiedIdentifier )*  

FormalParameters::=
  '('  ( FormalParameter ( ',' FormalParameter )* )?  ')'   

FormalParameter::=
  ( 'final' )? Type VariableDeclaratorId  

MethodBody::=
  Block  

// Contents  |  Prev  |  Next  |  Index         Java Language Specification
// Second Edition
// Copyright Â© 2000 Sun Microsystems, Inc. All rights reserved
// Please send any comments or corrections via our feedback form 
 