
(****************************************************************************
*
* ART release 0.10 by Adrian Johnstone (a.johnstone@rhul.ac.uk) 1 August 2010
*
* ansi_c.gtb - an ANSI standard C grammar
*
* This file may be freely distributed. Please mail improvements to the author.
*
* Provenance: this grammar is a transcription of the rules in section A13 of
* 'The C Programming Language' by Brian W Kernighan and Dennis M Ritchie,
* second edition 1988 (Prentice Hall, ISBN 0-13-110362-8). 
*
* Optional productions have been expanded and a set of lexical rules created.
*
*****************************************************************************)
translation_unit ::= external_declaration |
                     translation_unit external_declaration 

external_declaration ::= function_definition |
                         declaration  

function_definition ::= declaration_specifiers declarator declaration_list compound_statement |
                                               declarator declaration_list compound_statement |
                        declaration_specifiers declarator                  compound_statement |
                                               declarator                  compound_statement  

declaration ::= declaration_specifiers init_declarator_list ';' |
                declaration_specifiers                      ';'  

declaration_list ::= declaration |
                     declaration_list declaration  

declaration_specifiers ::= storage_class_specifier declaration_specifiers |
                           storage_class_specifier                        |

                           type_specifier declaration_specifiers |
                           type_specifier                        |

                           type_qualifier declaration_specifiers |
                           type_qualifier                         

storage_class_specifier ::= 'auto' |
                            'register' |
                            'static' |
                            'extern' |
                            'typedef' 

type_specifier ::= 'void' |
                   'char' |
                   'short' |
                   'int' |
                   'long' |
                   'float' |
                   'double' |
                   'signed' |
                   'unsigned' |
                   struct_or_union_specifier |
                   enum_specifier |
                   typedef_name 

type_qualifier ::= 'const' |
                   'volatile' 

struct_or_union_specifier ::= struct_or_union identifier '{' struct_declaration_list '}' |
                              struct_or_union            '{' struct_declaration_list '}' |
                              struct_or_union identifier 
                             
struct_or_union ::= 'struct' |
                    'union' 

struct_declaration_list ::= struct_declaration |
                            struct_declaration_list struct_declaration  

init_declarator_list ::= init_declarator |
                         init_declarator_list ',' init_declarator   

init_declarator ::= declarator  |
                    declarator '=' initializer   

struct_declaration ::= specifier_qualifier_list struct_declarator_list ';' 

specifier_qualifier_list ::= type_specifier specifier_qualifier_list |
                             type_specifier                          |
                             type_qualifier specifier_qualifier_list |
                             type_qualifier                           

struct_declarator_list ::= struct_declarator |
                           struct_declarator_list ',' struct_declarator  

struct_declarator ::= declarator |
                      declarator ':' constant_expression |
                                 ':' constant_expression   

enum_specifier ::= 'enum' identifier '{' enumerator_list '}' |
                   'enum'            '{' enumerator_list '}' |
                   'enum' identifier  

enumerator_list ::= enumerator |
                    enumerator_list ',' enumerator  

enumerator ::= identifier |
               identifier '=' constant_expression   

declarator ::= pointer direct_declarator |
                       direct_declarator  

direct_declarator ::= identifier |
                      '(' declarator ')' |
                      direct_declarator  '[' constant_expression ']' |
                      direct_declarator  '['                     ']' |
                      direct_declarator  '(' parameter_type_list ')'  |
                      direct_declarator  '(' identifier_list ')' |
                      direct_declarator  '('                 ')'  

pointer ::= '*' type_qualifier_list |
            '*'                     |
            '*' type_qualifier_list pointer |
            '*'                     pointer   

type_qualifier_list ::= type_qualifier |
                        type_qualifier_list type_qualifier  

parameter_type_list ::= parameter_list |
                        parameter_list ',' '...'  

parameter_list ::= parameter_declaration |
                   parameter_list ',' parameter_declaration   

parameter_declaration ::= declaration_specifiers declarator |
                          declaration_specifiers abstract_declarator |
                          declaration_specifiers                       

identifier_list ::= identifier |
                    identifier_list ',' identifier  

initializer ::= assignment_expression |
                '{' initializer_list '}' |
                '{' initializer_list ','  '}'  

initializer_list ::= initializer  |
                     initializer_list ',' initializer  

type_name ::= specifier_qualifier_list abstract_declarator |
              specifier_qualifier_list                      

abstract_declarator ::= pointer |
                        pointer direct_abstract_declarator |
                                direct_abstract_declarator   

 
direct_abstract_declarator ::= '(' abstract_declarator ')' |
                                direct_abstract_declarator '[' constant_expression ']' |
                                                           '[' constant_expression ']' |
                                direct_abstract_declarator '['                     ']' |
                                                           '['                     ']' |

                                direct_abstract_declarator '(' parameter_type_list ')' |
                                                           '(' parameter_type_list ')' |
                                direct_abstract_declarator '('                     ')' |
                                                           '('                     ')'  

statement ::= labeled_statement |
              expression_statement |
              compound_statement |
              selection_statement |
              iteration_statement |
              jump_statement  

labeled_statement ::= identifier ':' statement |
                      'case' constant_expression ':' statement |
                      'default' ':' statement 

expression_statement ::= expression ';' |
                                    ';'  

compound_statement ::= '{' declaration_list statement_list '}' |
                       '{'                  statement_list '}' |
                       '{' declaration_list                '}' |
                       '{'                                 '}'  


statement_list ::= statement |
                   statement_list statement  

selection_statement ::= 'if' '(' expression ')' statement |
                        'if' '(' expression ')' statement 'else' statement  |
                        'switch' '(' expression ')' statement 

iteration_statement ::= 'while' '(' expression ')' statement |
                        'do' statement 'while' '(' expression ')' |
                        'for' '(' expression ';' expression ';' expression ')' statement |
                        'for' '(' expression ';' expression ';'            ')' statement |
                        'for' '(' expression ';'            ';' expression ')' statement |
                        'for' '(' expression ';'            ';'            ')' statement |
                        'for' '('            ';' expression ';' expression ')' statement |
                        'for' '('            ';' expression ';'            ')' statement |
                        'for' '('            ';'            ';' expression ')' statement |
                        'for' '('            ';'            ';'            ')' statement  

jump_statement ::= 'goto' identifier ';' |
                   'continue' ';' |
                   'break' ';' |
                   'return' expression ';' |
                   'return'            ';' 

expression ::= assignment_expression |
               expression  ',' assignment_expression   

assignment_expression ::= conditional_expression  |
                          unary_expression  assignment_operator assignment_expression  

assignment_operator ::= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' 

conditional_expression ::= logical_or_expression |
                           logical_or_expression '?' expression ':' conditional_expression   

constant_expression ::= conditional_expression  

logical_or_expression ::= logical_and_expression |
                          logical_or_expression '||' logical_and_expression  

logical_and_expression ::= inclusive_or_expression |
                           logical_and_expression '&&' inclusive_or_expression  

inclusive_or_expression ::= exclusive_or_expression |
                            inclusive_or_expression '|' exclusive_or_expression  

exclusive_or_expression ::= and_expression |
                            exclusive_or_expression '^' and_expression  

and_expression ::= equality_expression |
                   and_expression '&' equality_expression   

equality_expression ::= relational_expression |
                        equality_expression  '==' relational_expression  |
                        equality_expression '!=' relational_expression  

relational_expression ::= shift_expression |
                          relational_expression '<' shift_expression |
                          relational_expression '>'  shift_expression |
                          relational_expression '<='  shift_expression |
                          relational_expression '>=' shift_expression   

shift_expression ::= additive_expression |
                     shift_expression '<<' additive_expression  |
                     shift_expression '>>' additive_expression  

additive_expression ::= multiplicative_expression |
                        additive_expression '+' multiplicative_expression |
                        additive_expression '-' multiplicative_expression 

multiplicative_expression ::= cast_expression |
                              multiplicative_expression '*' cast_expression |
                              multiplicative_expression '/' cast_expression |
                              multiplicative_expression '%' cast_expression   

cast_expression ::= unary_expression |
                    '(' type_name ')' cast_expression  

unary_expression ::= postfix_expression |
                     '++' unary_expression |
                     '--' unary_expression |
                     unary_operator cast_expression |
                     'sizeof' unary_expression |
                     'sizeof' '(' type_name')'  

unary_operator ::= '&' | '*' | '+' | '-' | '~' | '!' 

postfix_expression ::= primary_expression |
                       postfix_expression '[' expression ']' |
                       postfix_expression '(' argument_expression_list ')' |
                       postfix_expression '('                          ')' |
                       postfix_expression '.' identifier |
                       postfix_expression '->' identifier |
                       postfix_expression '++' |
                       postfix_expression '--'   

primary_expression ::= identifier |
                       constant |
                       string |
                       '(' expression ')' 

argument_expression_list ::= assignment_expression |
                             argument_expression_list ',' assignment_expression  

constant ::= integer_constant |
             (*character_constant |*) 
             floating_constant |
             enumeration_constant  

(* Lexical producions *)
identifier ::= 'ID'  
string ::= 'STRING' | string 'STRING'  
integer_constant ::= 'INTEGER'  
character_constant ::= 'STRING'  
floating_constant ::= 'REAL'  

(* Hack 1: the original grammar has a constant alternative for enumeration
   constants: this looks redundant because primary_expresion has an identifier
   alternative. We use a different keyword to avoid conflicts.
*)
enumeration_constant ::= 'ENUM_ID'  

(* Hack 2: a declaration starting with a typedef-defined type identifier
   cannot be disambiguated unless the lexer returns a different token
   for such identifiers. Here we use a different keyword *)
typedef_name ::= 'ID' 
                 | 'TYPE_ID' 
 