
compilation_unit ::=
  using_directives? global_attributes? namespace_member_declarations?  

// Generated by gramex V3.0 from 'csharp language specification v1.2.raw' (this build Mar 25 2012 at 13:21:48)
// Command line: C:\csle\dev\gramex\gramex.exe -d -s csharp language specification v1.2.raw
// Grammar
// This appendix contains summaries of the lexical and syntactic grammars found in the main document, and of the grammar extensions for unsafe code. Grammar productions appear here in the same order that they appear in the main document.
// A.2 Syntactic grammar
// A.2.1 Basic concepts
namespace_name ::=
  namespace_or_type_name  
type_name ::=
  namespace_or_type_name  
namespace_or_type_name ::=
  identifier |
  namespace_or_type_name '.' identifier  
// A.2.2 Types
type ::=
  value_type |
  reference_type  
value_type ::=
  struct_type |
  enum_type  
struct_type ::=
  type_name |
  simple_type  
simple_type ::=
  numeric_type |
  'bool'  
numeric_type ::=
  integral_type |
  floating_point_type |
  'decimal'  
integral_type ::=
  'sbyte' |
  'byte' |
  'short' |
  'ushort' |
  'int' |
  'uint' |
  'long' |
  'ulong' |
  'char'  
floating_point_type ::=
  'float' |
  'double'  
enum_type ::=
  type_name  
reference_type ::=
  class_type |
  interface_type |
  array_type |
  delegate_type  
class_type ::=
  type_name |
  'object' |
  'string'  
interface_type ::=
  type_name  
delegate_type ::=
  type_name  
// A.2.3 Variables
variable_reference ::=
  expression  
// A.2.4 Expressions
argument_list ::=
  argument |
  argument_list ',' argument  
argument ::=
  expression |
  'ref' variable_reference |
  'out' variable_reference  
primary_expression ::=
  primary_no_array_creation_expression |
  array_creation_expression  
primary_no_array_creation_expression ::=
  literal |
  simple_name |
  parenthesized_expression |
  member_access |
  invocation_expression |
  element_access |
  this_access |
  base_access |
  post_increment_expression |
  post_decrement_expression |
  object_creation_expression |
  delegate_creation_expression |
  typeof_expression |
  checked_expression |
  unchecked_expression  
simple_name ::=
  identifier  
parenthesized_expression ::=
  '(' expression ')'  
member_access ::=
  primary_expression '.' identifier |
  predefined_type '.' identifier  
predefined_type ::=
  'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' |
  'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort'  
invocation_expression ::=
  primary_expression '(' argument_list? ')'  
element_access ::=
  primary_no_array_creation_expression '[' expression_list ']'  
expression_list ::=
  expression |
  expression_list ',' expression  
this_access ::=
  'this'  
base_access ::=
  'base' '.' identifier |
  'base' '[' expression_list ']'  
post_increment_expression ::=
  primary_expression '++'  
post_decrement_expression ::=
  primary_expression '--'  
object_creation_expression ::=
  'new' type '(' argument_list? ')'  
array_creation_expression ::=
  'new' non_array_type '[' expression_list ']' rank_specifiers? array_initializer? |
  'new' array_type array_initializer  
delegate_creation_expression ::=
  'new' delegate_type '(' expression ')'  
typeof_expression ::=
  'typeof' '(' type ')' |
  'typeof' '(' 'void' ')'  
checked_expression ::=
  'checked' '(' expression ')'  
unchecked_expression ::=
  'unchecked' '(' expression ')'  
unary_expression ::=
  primary_expression |
  '+' unary_expression |
  '-' unary_expression |
  '!' unary_expression |
  '~' unary_expression |
  pre_increment_expression |
  pre_decrement_expression |
  cast_expression  
pre_increment_expression ::=
  '++' unary_expression  
pre_decrement_expression ::=
  '--' unary_expression  
cast_expression ::=
  '(' type ')' unary_expression  
multiplicative_expression ::=
  unary_expression |
  multiplicative_expression '*' unary_expression |
  multiplicative_expression '/' unary_expression |
  multiplicative_expression '%' unary_expression  
additive_expression ::=
  multiplicative_expression |
  additive_expression '+' multiplicative_expression |
  additive_expression '-' multiplicative_expression  
shift_expression ::=
  additive_expression |
  shift_expression '<<' additive_expression |
  shift_expression '>>' additive_expression  
relational_expression ::=
  shift_expression |
  relational_expression '<' shift_expression |
  relational_expression '>' shift_expression |
  relational_expression '<=' shift_expression |
  relational_expression '>=' shift_expression |
  relational_expression 'is' type |
  relational_expression 'as' type  
equality_expression ::=
  relational_expression |
  equality_expression '==' relational_expression |
  equality_expression '!=' relational_expression  
and_expression ::=
  equality_expression |
  and_expression '&' equality_expression  
exclusive_or_expression ::=
  and_expression |
  exclusive_or_expression '^' and_expression  
inclusive_or_expression ::=
  exclusive_or_expression |
  inclusive_or_expression '|' exclusive_or_expression  
conditional_and_expression ::=
  inclusive_or_expression |
  conditional_and_expression '&&' inclusive_or_expression  
conditional_or_expression ::=
  conditional_and_expression |
  conditional_or_expression '||' conditional_and_expression  
conditional_expression ::=
  conditional_or_expression |
  conditional_or_expression '?' expression ':' expression  
assignment ::=
  unary_expression assignment_operator expression  
assignment_operator ::=
  '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>='  
expression ::=
  conditional_expression |
  assignment  
constant_expression ::=
  expression  
boolean_expression ::=
  expression  
// A.2.5 Statements
statement ::=
  labeled_statement |
  declaration_statement |
  embedded_statement  
embedded_statement ::=
  block |
  empty_statement |
  expression_statement |
  selection_statement |
  iteration_statement |
  jump_statement |
  try_statement |
  checked_statement |
  unchecked_statement |
  lock_statement |
  using_statement  
block ::=
  '{' statement_list? '}'  
statement_list ::=
  statement |
  statement_list statement  
empty_statement ::=
  ';'  
labeled_statement ::=
  identifier ':' statement  
declaration_statement ::=
  local_variable_declaration ';' |
  local_constant_declaration ';'  
local_variable_declaration ::=
  type local_variable_declarators  
local_variable_declarators ::=
  local_variable_declarator |
  local_variable_declarators ',' local_variable_declarator  
local_variable_declarator ::=
  identifier |
  identifier '=' local_variable_initializer  
local_variable_initializer ::=
  expression |
  array_initializer  
local_constant_declaration ::=
  'const' type constant_declarators  
constant_declarators ::=
  constant_declarator |
  constant_declarators ',' constant_declarator  
constant_declarator ::=
  identifier '=' constant_expression  
expression_statement ::=
  statement_expression ';'  
statement_expression ::=
  invocation_expression |
  object_creation_expression |
  assignment |
  post_increment_expression |
  post_decrement_expression |
  pre_increment_expression |
  pre_decrement_expression  
selection_statement ::=
  if_statement |
  switch_statement  
if_statement ::=
  'if' '(' boolean_expression ')' embedded_statement |
  'if' '(' boolean_expression ')' embedded_statement 'else' embedded_statement  
switch_statement ::=
  'switch' '(' expression ')' switch_block  
switch_block ::=
  '{' switch_sections? '}'  
switch_sections ::=
  switch_section |
  switch_sections switch_section  
switch_section ::=
  switch_labels statement_list  
switch_labels ::=
  switch_label |
  switch_labels switch_label  
switch_label ::=
  'case' constant_expression ':' |
  'default' ':'  
iteration_statement ::=
  while_statement |
  do_statement |
  for_statement |
  foreach_statement  
while_statement ::=
  'while' '(' boolean_expression ')' embedded_statement  
do_statement ::=
  'do' embedded_statement 'while' '(' boolean_expression ')' ';'  
for_statement ::=
  'for' '(' for_initializer? ';' for_condition? ';' for_iterator? ')' embedded_statement  
for_initializer ::=
  local_variable_declaration |
  statement_expression_list  
for_condition ::=
  boolean_expression  
for_iterator ::=
  statement_expression_list  
statement_expression_list ::=
  statement_expression |
  statement_expression_list ',' statement_expression  
foreach_statement ::=
  'foreach' '(' type identifier 'in' expression ')' embedded_statement  
jump_statement ::=
  break_statement |
  continue_statement |
  goto_statement |
  return_statement |
  throw_statement  
break_statement ::=
  'break' ';'  
continue_statement ::=
  'continue' ';'  
goto_statement ::=
  'goto' identifier ';' |
  'goto' 'case' constant_expression ';' |
  'goto' 'default' ';'  
return_statement ::=
  'return' expression? ';'  
throw_statement ::=
  'throw' expression? ';'  
try_statement ::=
  'try' block catch_clauses |
  'try' block finally_clause |
  'try' block catch_clauses finally_clause  
catch_clauses ::=
  specific_catch_clauses general_catch_clause? |
  specific_catch_clauses? general_catch_clause  
specific_catch_clauses ::=
  specific_catch_clause |
  specific_catch_clauses specific_catch_clause  
specific_catch_clause ::=
  'catch' '(' class_type identifier? ')' block  
general_catch_clause ::=
  'catch' block  
finally_clause ::=
  'finally' block  
checked_statement ::=
  'checked' block  
unchecked_statement ::=
  'unchecked' block  
lock_statement ::=
  'lock' '(' expression ')' embedded_statement  
using_statement ::=
  'using' '(' resource_acquisition ')' embedded_statement  
resource_acquisition ::=
  local_variable_declaration |
  expression  
// A.2.6 Namespaces
//compilation_unit ::=
//  using_directives? global_attributes? namespace_member_declarations?  
namespace_declaration ::=
  'namespace' qualified_identifier namespace_body ';'?  
qualified_identifier ::=
  identifier |
  qualified_identifier '.' identifier  
namespace_body ::=
  '{' using_directives? namespace_member_declarations? '}'  
using_directives ::=
  using_directive |
  using_directives using_directive  
using_directive ::=
  using_alias_directive |
  using_namespace_directive  
using_alias_directive ::=
  'using' identifier '=' namespace_or_type_name ';'  
using_namespace_directive ::=
  'using' namespace_name ';'  
namespace_member_declarations ::=
  namespace_member_declaration |
  namespace_member_declarations namespace_member_declaration  
namespace_member_declaration ::=
  namespace_declaration |
  type_declaration  
type_declaration ::=
  class_declaration |
  struct_declaration |
  interface_declaration |
  enum_declaration |
  delegate_declaration  
// A.2.7 Classes
class_declaration ::=
  attributes? class_modifiers? 'class' identifier class_base? class_body ';'?  
class_modifiers ::=
  class_modifier |
  class_modifiers class_modifier  
class_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'abstract' |
  'sealed'  
class_base ::=
  ':' class_type |
  ':' interface_type_list |
  ':' class_type ',' interface_type_list  
interface_type_list ::=
  interface_type |
  interface_type_list ',' interface_type  
class_body ::=
  '{' class_member_declarations? '}'  
class_member_declarations ::=
  class_member_declaration |
  class_member_declarations class_member_declaration  
class_member_declaration ::=
  constant_declaration |
  field_declaration |
  method_declaration |
  property_declaration |
  event_declaration |
  indexer_declaration |
  operator_declaration |
  constructor_declaration |
  destructor_declaration |
  static_constructor_declaration |
  type_declaration  
constant_declaration ::=
  attributes? constant_modifiers? 'const' type constant_declarators ';'  
constant_modifiers ::=
  constant_modifier |
  constant_modifiers constant_modifier  
constant_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private'  
field_declaration ::=
  attributes? field_modifiers? type variable_declarators ';'  
field_modifiers ::=
  field_modifier |
  field_modifiers field_modifier  
field_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'static' |
  'readonly' |
  'volatile'  
variable_declarators ::=
  variable_declarator |
  variable_declarators ',' variable_declarator  
variable_declarator ::=
  identifier |
  identifier '=' variable_initializer  
variable_initializer ::=
  expression |
  array_initializer  
method_declaration ::=
  method_header method_body  
method_header ::=
  attributes? method_modifiers? return_type member_name '(' formal_parameter_list? ')'  
method_modifiers ::=
  method_modifier |
  method_modifiers method_modifier  
method_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'static' |
  'virtual' |
  'sealed' |
  'override' |
  'abstract' |
  'extern'  
return_type ::=
  type |
  'void'  
member_name ::=
  identifier |
  interface_type '.' identifier  
method_body ::=
  block |
  ';'  
formal_parameter_list ::=
  fixed_parameters |
  fixed_parameters ',' parameter_array |
  parameter_array  
fixed_parameters ::=
  fixed_parameter |
  fixed_parameters ',' fixed_parameter  
fixed_parameter ::=
  attributes? parameter_modifier? type identifier  
parameter_modifier ::=
  'ref' |
  'out'  
parameter_array ::=
  attributes? 'params' array_type identifier  
property_declaration ::=
  attributes? property_modifiers? type member_name '{' accessor_declarations '}'  
property_modifiers ::=
  property_modifier |
  property_modifiers property_modifier  
property_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'static' |
  'virtual' |
  'sealed' |
  'override' |
  'abstract' |
  'extern'  
accessor_declarations ::=
  get_accessor_declaration set_accessor_declaration? |
  set_accessor_declaration get_accessor_declaration?  
get_accessor_declaration ::=
  attributes? 'get' accessor_body  
set_accessor_declaration ::=
  attributes? 'set' accessor_body  
accessor_body ::=
  block |
  ';'  
event_declaration ::=
  attributes? event_modifiers? 'event' type variable_declarators ';' |
  attributes? event_modifiers? 'event' type member_name '{' event_accessor_declarations '}'  
event_modifiers ::=
  event_modifier |
  event_modifiers event_modifier  
event_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'static' |
  'virtual' |
  'sealed' |
  'override' |
  'abstract' |
  'extern'  
event_accessor_declarations ::=
  add_accessor_declaration remove_accessor_declaration |
  remove_accessor_declaration add_accessor_declaration  
add_accessor_declaration ::=
  attributes? 'add' block  
remove_accessor_declaration ::=
  attributes? 'remove' block  
indexer_declaration ::=
  attributes? indexer_modifiers? indexer_declarator '{' accessor_declarations '}'  
indexer_modifiers ::=
  indexer_modifier |
  indexer_modifiers indexer_modifier  
indexer_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private' |
  'virtual' |
  'sealed' |
  'override' |
  'abstract' |
  'extern'  
indexer_declarator ::=
  type 'this' '[' formal_parameter_list ']' |
  type interface_type '.' 'this' '[' formal_parameter_list ']'  
operator_declaration ::=
  attributes? operator_modifiers operator_declarator operator_body  
operator_modifiers ::=
  operator_modifier |
  operator_modifiers operator_modifier  
operator_modifier ::=
  'public' |
  'static' |
  'extern'  
operator_declarator ::=
  unary_operator_declarator |
  binary_operator_declarator |
  conversion_operator_declarator  
unary_operator_declarator ::=
  type 'operator' overloadable_unary_operator '(' type identifier ')'  
overloadable_unary_operator ::=
  '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false'  
binary_operator_declarator ::=
  type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')'  
overloadable_binary_operator ::=
  '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>>' | '==' | '!=' | '>' | '<' | '>=' | '<='  
conversion_operator_declarator ::=
  'implicit' 'operator' type '(' type identifier ')' |
  'explicit' 'operator' type '(' type identifier ')'  
operator_body ::=
  block |
  ';'  
constructor_declaration ::=
  attributes? constructor_modifiers? constructor_declarator constructor_body  
constructor_modifiers ::=
  constructor_modifier |
  constructor_modifiers constructor_modifier  
constructor_modifier ::=
  'public' |
  'protected' |
  'internal' |
  'private' |
  'extern'  
constructor_declarator ::=
  identifier '(' formal_parameter_list? ')' constructor_initializer?  
constructor_initializer ::=
  ':' 'base' '(' argument_list? ')' |
  ':' 'this' '(' argument_list? ')'  
constructor_body ::=
  block |
  ';'  
static_constructor_declaration ::=
  attributes? static_constructor_modifiers identifier '(' ')' static_constructor_body  
static_constructor_modifiers ::=
  'extern'? 'static' |
  'static' 'extern'?  
static_constructor_body ::=
  block |
  ';'  
destructor_declaration ::=
  attributes? 'extern'? '~' identifier '(' ')' destructor_body  
destructor_body ::=
  block |
  ';'  
// A.2.8 Structs
struct_declaration ::=
  attributes? struct_modifiers? 'struct' identifier struct_interfaces? struct_body ';'?  
struct_modifiers ::=
  struct_modifier |
  struct_modifiers struct_modifier  
struct_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private'  
struct_interfaces ::=
  ':' interface_type_list  
struct_body ::=
  '{' struct_member_declarations? '}'  
struct_member_declarations ::=
  struct_member_declaration |
  struct_member_declarations struct_member_declaration  
struct_member_declaration ::=
  constant_declaration |
  field_declaration |
  method_declaration |
  property_declaration |
  event_declaration |
  indexer_declaration |
  operator_declaration |
  constructor_declaration |
  static_constructor_declaration |
  type_declaration  
// A.2.9 Arrays
array_type ::=
  non_array_type rank_specifiers  
non_array_type ::=
  type  
rank_specifiers ::=
  rank_specifier |
  rank_specifiers rank_specifier  
rank_specifier ::=
  '[' dim_separators? ']'  
dim_separators ::=
  ',' |
  dim_separators ','  
array_initializer ::=
  '{' variable_initializer_list? '}' |
  '{' variable_initializer_list ',' '}'  
variable_initializer_list ::=
  variable_initializer |
  variable_initializer_list ',' variable_initializer  
// A.2.10 Interfaces
interface_declaration ::=
  attributes? interface_modifiers? 'interface' identifier interface_base? interface_body ';'?  
interface_modifiers ::=
  interface_modifier |
  interface_modifiers interface_modifier  
interface_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private'  
interface_base ::=
  ':' interface_type_list  
interface_body ::=
  '{' interface_member_declarations? '}'  
interface_member_declarations ::=
  interface_member_declaration |
  interface_member_declarations interface_member_declaration  
interface_member_declaration ::=
  interface_method_declaration |
  interface_property_declaration |
  interface_event_declaration |
  interface_indexer_declaration  
interface_method_declaration ::=
  attributes? 'new'? return_type identifier '(' formal_parameter_list? ')' ';'  
interface_property_declaration ::=
  attributes? 'new'? type identifier '{' interface_accessors '}'  
interface_accessors ::=
  attributes? 'get' ';' |
  attributes? 'set' ';' |
  attributes? 'get' ';' attributes? 'set' ';' |
  attributes? 'set' ';' attributes? 'get' ';'  
interface_event_declaration ::=
  attributes? 'new'? 'event' type identifier ';'  
interface_indexer_declaration ::=
  attributes? 'new'? type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}'  
// A.2.11 Enums
enum_declaration ::=
  attributes? enum_modifiers? 'enum' identifier enum_base? enum_body ';'?  
enum_base ::=
  ':' integral_type  
enum_body ::=
  '{' enum_member_declarations? '}' |
  '{' enum_member_declarations ',' '}'  
enum_modifiers ::=
  enum_modifier |
  enum_modifiers enum_modifier  
enum_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private'  
enum_member_declarations ::=
  enum_member_declaration |
  enum_member_declarations ',' enum_member_declaration  
enum_member_declaration ::=
  attributes? identifier |
  attributes? identifier '=' constant_expression  
// A.2.12 Delegates
delegate_declaration ::=
  attributes? delegate_modifiers? 'delegate' return_type identifier |
  '(' formal_parameter_list? ')' ';'  
delegate_modifiers ::=
  delegate_modifier |
  delegate_modifiers delegate_modifier  
delegate_modifier ::=
  'new' |
  'public' |
  'protected' |
  'internal' |
  'private'  
// A.2.13 Attributes
global_attributes ::=
  global_attribute_sections  
global_attribute_sections ::=
  global_attribute_section |
  global_attribute_sections global_attribute_section  
global_attribute_section ::=
  '[' global_attribute_target_specifier attribute_list ']' |
  '[' global_attribute_target_specifier attribute_list ',]'  
global_attribute_target_specifier ::=
  global_attribute_target ':'  
global_attribute_target ::=
  'assembly' |
  'module'  
attributes ::=
  attribute_sections  
attribute_sections ::=
  attribute_section |
  attribute_sections attribute_section  
attribute_section ::=
  '[' attribute_target_specifier? attribute_list ']' |
  '[' attribute_target_specifier? attribute_list ',' ']'  
attribute_target_specifier ::=
  attribute_target ':'  
attribute_target ::=
  'field' |
  'event' |
  'method' |
  'param' |
  'property' |
  'return' |
  type  
attribute_list ::=
  attribute |
  attribute_list ',' attribute  
attribute ::=
  attribute_name attribute_arguments?  
attribute_name ::=
  type_name  
attribute_arguments ::=
  '(' positional_argument_list? ')' |
  '(' positional_argument_list ',' named_argument_list ')' |
  '(' named_argument_list ')'  
positional_argument_list ::=
  positional_argument |
  positional_argument_list ',' positional_argument  
positional_argument ::=
  attribute_argument_expression  
named_argument_list ::=
  named_argument |
  named_argument_list ',' named_argument  
named_argument ::=
  identifier '=' attribute_argument_expression  
attribute_argument_expression ::=
  expression  

literal ::=
  boolean_literal |
  'INTEGER' |
  'REAL' |
  'STRING' |
  null_literal  
boolean_literal ::=
  'true' |
  'false'  
null_literal ::=
  'null'  

identifier ::= 'ID' 
 