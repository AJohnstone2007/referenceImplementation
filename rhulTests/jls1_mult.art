
(* ART3 grammar generated by ART from 'v2\jls1V2.art' on Jun 10 2018 08:39:23 *)
Goal ::=
   CompilationUnit 

AbstractMethodDeclaration ::=
   MethodHeader ';' 

AdditiveExpression ::=
   MultiplicativeExpression |
   AdditiveExpression '+' MultiplicativeExpression |
   AdditiveExpression '-' MultiplicativeExpression 

AndExpression ::=
   EqualityExpression |
   AndExpression '&' EqualityExpression 

ArgumentList ::=
   Expression |
   ArgumentList ',' Expression 

ArrayAccess ::=
   Name '[' Expression ']' |
   PrimaryNoNewArray '[' Expression ']' 

ArrayCreationExpression ::=
   'new' PrimitiveType DimExprs |
   'new' PrimitiveType DimExprs Dims |
   'new' ClassOrInterfaceType DimExprs |
   'new' ClassOrInterfaceType DimExprs Dims 

ArrayInitializer ::=
   '{' '}' |
   '{' ',' '}' |
   '{' VariableInitializers '}' |
   '{' VariableInitializers ',' '}' 

ArrayType ::=
   PrimitiveType '[' ']' |
   Name '[' ']' |
   ArrayType '[' ']' 

Assignment ::=
   LeftHandSide AssignmentOperator AssignmentExpression 

AssignmentExpression ::=
   ConditionalExpression |
   Assignment 

AssignmentOperator ::=
   '=' |
   '*=' |
   '/=' |
   '%=' |
   '+=' |
   '-=' |
   '<<=' |
   '>>=' |
   '>>>=' |
   '&=' |
   '^=' |
   '|=' 

Block ::=
   '{' '}' |
   '{' BlockStatements '}' 

BlockStatement ::=
   LocalVariableDeclarationStatement |
   Statement 

BlockStatements ::=
   BlockStatement |
   BlockStatements BlockStatement 

BreakStatement ::=
   'break' ';' |
   'break' 'ID' ';' 

CastExpression ::=
   '(' Expression ')' UnaryExpressionNotPlusMinus |
   '(' Name Dims ')' UnaryExpressionNotPlusMinus |
   '(' PrimitiveType ')' UnaryExpression |
   '(' PrimitiveType Dims ')' UnaryExpression 

CatchClause ::=
   'catch' '(' FormalParameter ')' Block 

Catches ::=
   CatchClause |
   Catches CatchClause 

ClassBody ::=
   '{' '}' |
   '{' ClassBodyDeclarations '}' 

ClassBodyDeclaration ::=
   ClassMemberDeclaration |
   StaticInitializer |
   ConstructorDeclaration 

ClassBodyDeclarations ::=
   ClassBodyDeclaration |
   ClassBodyDeclarations ClassBodyDeclaration 

ClassDeclaration ::=
   'class' 'ID' ClassBody |
   'class' 'ID' Interfaces ClassBody |
   'class' 'ID' Super ClassBody |
   'class' 'ID' Super Interfaces ClassBody |
   Modifiers 'class' 'ID' ClassBody |
   Modifiers 'class' 'ID' Interfaces ClassBody |
   Modifiers 'class' 'ID' Super ClassBody |
   Modifiers 'class' 'ID' Super Interfaces ClassBody 

ClassInstanceCreationExpression ::=
   'new' ClassType '(' ')' |
   'new' ClassType '(' ArgumentList ')' 

ClassMemberDeclaration ::=
   FieldDeclaration |
   MethodDeclaration 

ClassOrInterfaceType ::=
   Name 

ClassType ::=
   ClassOrInterfaceType 

ClassTypeList ::=
   ClassType |
   ClassTypeList ',' ClassType 

CompilationUnit ::=
   # |
   TypeDeclarations |
   ImportDeclarations |
   ImportDeclarations TypeDeclarations |
   PackageDeclaration |
   PackageDeclaration TypeDeclarations |
   PackageDeclaration ImportDeclarations |
   PackageDeclaration ImportDeclarations TypeDeclarations 

ConditionalAndExpression ::=
   InclusiveOrExpression |
   ConditionalAndExpression '&&' InclusiveOrExpression 

ConditionalExpression ::=
   ConditionalOrExpression |
   ConditionalOrExpression '?' Expression ':' ConditionalExpression 

ConditionalOrExpression ::=
   ConditionalAndExpression |
   ConditionalOrExpression '||' ConditionalAndExpression 

ConstantDeclaration ::=
   FieldDeclaration 

ConstantExpression ::=
   Expression 

ConstructorBody ::=
   '{' '}' |
   '{' BlockStatements '}' |
   '{' ExplicitConstructorInvocation '}' |
   '{' ExplicitConstructorInvocation BlockStatements '}' 

ConstructorDeclaration ::=
   ConstructorDeclarator ConstructorBody |
   ConstructorDeclarator Throws ConstructorBody |
   Modifiers ConstructorDeclarator ConstructorBody |
   Modifiers ConstructorDeclarator Throws ConstructorBody 

ConstructorDeclarator ::=
   SimpleName '(' ')' |
   SimpleName '(' FormalParameterList ')' 

ContinueStatement ::=
   'continue' ';' |
   'continue' 'ID' ';' 

DimExpr ::=
   '[' Expression ']' 

DimExprs ::=
   DimExpr |
   DimExprs DimExpr 

Dims ::=
   '[' ']' |
   Dims '[' ']' 

DoStatement ::=
   'do' Statement 'while' '(' Expression ')' ';' 

EmptyStatement ::=
   ';' 

EqualityExpression ::=
   RelationalExpression |
   EqualityExpression '==' RelationalExpression |
   EqualityExpression '!=' RelationalExpression 

ExclusiveOrExpression ::=
   AndExpression |
   ExclusiveOrExpression '^' AndExpression 

ExplicitConstructorInvocation ::=
   'this' '(' ')' ';' |
   'this' '(' ArgumentList ')' ';' |
   'super' '(' ')' ';' |
   'super' '(' ArgumentList ')' ';' 

Expression ::=
   AssignmentExpression 

ExpressionStatement ::=
   StatementExpression ';' 

ExtendsInterfaces ::=
   'extends' InterfaceType |
   ExtendsInterfaces ',' InterfaceType 

FieldAccess ::=
   Primary '.' 'ID' |
   'super' '.' 'ID' 

FieldDeclaration ::=
   Type VariableDeclarators ';' |
   Modifiers Type VariableDeclarators ';' 

Finally ::=
   'finally' Block 

FloatingPointType ::=
   'float' |
   'double' 

ForInit ::=
   StatementExpressionList |
   LocalVariableDeclaration 

ForStatement ::=
   'for' '(' ';' ';' ')' Statement |
   'for' '(' ';' ';' ForUpdate ')' Statement |
   'for' '(' ';' Expression ';' ')' Statement |
   'for' '(' ';' Expression ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' ';' ')' Statement |
   'for' '(' ForInit ';' ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' Expression ';' ')' Statement |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' Statement 

ForStatementNoShortIf ::=
   'for' '(' ';' ';' ')' StatementNoShortIf |
   'for' '(' ';' ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ';' Expression ';' ')' StatementNoShortIf |
   'for' '(' ';' Expression ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ForInit ';' ';' ')' StatementNoShortIf |
   'for' '(' ForInit ';' ';' ForUpdate ')' StatementNoShortIf |
   'for' '(' ForInit ';' Expression ';' ')' StatementNoShortIf |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' StatementNoShortIf 

ForUpdate ::=
   StatementExpressionList 

FormalParameter ::=
   Type VariableDeclaratorId 

FormalParameterList ::=
   FormalParameter |
   FormalParameterList ',' FormalParameter 

IfThenElseStatement ::=
   'if' '(' Expression ')' StatementNoShortIf 'else' Statement 

IfThenElseStatementNoShortIf ::=
   'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf 

IfThenStatement ::=
   'if' '(' Expression ')' Statement 

ImportDeclaration ::=
   SingleTypeImportDeclaration |
   TypeImportOnDemandDeclaration 

ImportDeclarations ::=
   ImportDeclaration |
   ImportDeclarations ImportDeclaration 

InclusiveOrExpression ::=
   ExclusiveOrExpression |
   InclusiveOrExpression '|' ExclusiveOrExpression 

IntegralType ::=
   'byte' |
   'short' |
   'int' |
   'long' |
   'char' 

InterfaceBody ::=
   '{' '}' |
   '{' InterfaceMemberDeclarations '}' 

InterfaceDeclaration ::=
   'interface' 'ID' InterfaceBody |
   'interface' 'ID' ExtendsInterfaces InterfaceBody |
   Modifiers 'interface' 'ID' InterfaceBody |
   Modifiers 'interface' 'ID' ExtendsInterfaces InterfaceBody 

InterfaceMemberDeclaration ::=
   ConstantDeclaration |
   AbstractMethodDeclaration 

InterfaceMemberDeclarations ::=
   InterfaceMemberDeclaration |
   InterfaceMemberDeclarations InterfaceMemberDeclaration 

InterfaceType ::=
   ClassOrInterfaceType 

InterfaceTypeList ::=
   InterfaceType |
   InterfaceTypeList ',' InterfaceType 

Interfaces ::=
   'implements' InterfaceTypeList 

LabeledStatement ::=
   'ID' ':' Statement 

LabeledStatementNoShortIf ::=
   'ID' ':' StatementNoShortIf 

LeftHandSide ::=
   Name |
   FieldAccess |
   ArrayAccess 

Literal ::=
   'INTEGER' |
   'REAL' |
   'CHAR' |
   'STRING' |
   'true' |
   'false' |
   'null' 

LocalVariableDeclaration ::=
   Type VariableDeclarators 

LocalVariableDeclarationStatement ::=
   LocalVariableDeclaration ';' 

MethodBody ::=
   Block |
   ';' 

MethodDeclaration ::=
   MethodHeader MethodBody 

MethodDeclarator ::=
   MethodDeclarator '[' ']' |
   'ID' '(' ')' |
   'ID' '(' FormalParameterList ')' 

MethodHeader ::=
   Type MethodDeclarator |
   Type MethodDeclarator Throws |
   Modifiers Type MethodDeclarator |
   Modifiers Type MethodDeclarator Throws |
   'void' MethodDeclarator |
   'void' MethodDeclarator Throws |
   Modifiers 'void' MethodDeclarator |
   Modifiers 'void' MethodDeclarator Throws 

MethodInvocation ::=
   Name '(' ')' |
   Name '(' ArgumentList ')' |
   Primary '.' 'ID' '(' ')' |
   Primary '.' 'ID' '(' ArgumentList ')' |
   'super' '.' 'ID' '(' ')' |
   'super' '.' 'ID' '(' ArgumentList ')' 

Modifier ::=
   'public' |
   'protected' |
   'private' |
   'static' |
   'abstract' |
   'final' |
   'native' |
   'synchronized' |
   'transient' |
   'volatile' 

Modifiers ::=
   Modifier |
   Modifiers Modifier 

MultiplicativeExpression ::=
   UnaryExpression |
   MultiplicativeExpression '*' UnaryExpression |
   MultiplicativeExpression '/' UnaryExpression |
   MultiplicativeExpression '%' UnaryExpression 

Name ::=
   SimpleName |
   QualifiedName 

NumericType ::=
   IntegralType |
   FloatingPointType 

PackageDeclaration ::=
   'package' Name ';' 

PostDecrementExpression ::=
   PostfixExpression '--' 

PostIncrementExpression ::=
   PostfixExpression '++' 

PostfixExpression ::=
   Primary |
   Name |
   PostIncrementExpression |
   PostDecrementExpression 

PreDecrementExpression ::=
   '--' UnaryExpression 

PreIncrementExpression ::=
   '++' UnaryExpression 

Primary ::=
   PrimaryNoNewArray |
   ArrayCreationExpression 

PrimaryNoNewArray ::=
   Literal |
   'this' |
   '(' Expression ')' |
   ClassInstanceCreationExpression |
   FieldAccess |
   MethodInvocation |
   ArrayAccess 

PrimitiveType ::=
   NumericType |
   'boolean' 

QualifiedName ::=
   Name '.' 'ID' 

ReferenceType ::=
   ClassOrInterfaceType |
   ArrayType 

RelationalExpression ::=
   ShiftExpression |
   RelationalExpression '<' ShiftExpression |
   RelationalExpression '>' ShiftExpression |
   RelationalExpression '<=' ShiftExpression |
   RelationalExpression '>=' ShiftExpression |
   RelationalExpression 'instanceof' ReferenceType 

ReturnStatement ::=
   'return' ';' |
   'return' Expression ';' 

ShiftExpression ::=
   AdditiveExpression |
   ShiftExpression '<<' AdditiveExpression |
   ShiftExpression '>>' AdditiveExpression |
   ShiftExpression '>>>' AdditiveExpression 

SimpleName ::=
   'ID' 

SingleTypeImportDeclaration ::=
   'import' Name ';' 

Statement ::=
   StatementWithoutTrailingSubstatement |
   LabeledStatement |
   IfThenStatement |
   IfThenElseStatement |
   WhileStatement |
   ForStatement 

StatementExpression ::=
   Assignment |
   PreIncrementExpression |
   PreDecrementExpression |
   PostIncrementExpression |
   PostDecrementExpression |
   MethodInvocation |
   ClassInstanceCreationExpression 

StatementExpressionList ::=
   StatementExpression |
   StatementExpressionList ',' StatementExpression 

StatementNoShortIf ::=
   StatementWithoutTrailingSubstatement |
   LabeledStatementNoShortIf |
   IfThenElseStatementNoShortIf |
   WhileStatementNoShortIf |
   ForStatementNoShortIf 

StatementWithoutTrailingSubstatement ::=
   Block |
   EmptyStatement |
   ExpressionStatement |
   SwitchStatement |
   DoStatement |
   BreakStatement |
   ContinueStatement |
   ReturnStatement |
   SynchronizedStatement |
   ThrowStatement |
   TryStatement 

StaticInitializer ::=
   'static' Block 

Super ::=
   'extends' ClassType 

SwitchBlock ::=
   '{' '}' |
   '{' SwitchLabels '}' |
   '{' SwitchBlockStatementGroups '}' |
   '{' SwitchBlockStatementGroups SwitchLabels '}' 

SwitchBlockStatementGroup ::=
   SwitchLabels BlockStatements 

SwitchBlockStatementGroups ::=
   SwitchBlockStatementGroup |
   SwitchBlockStatementGroups SwitchBlockStatementGroup 

SwitchLabel ::=
   'case' ConstantExpression ':' |
   'default' ':' 

SwitchLabels ::=
   SwitchLabel |
   SwitchLabels SwitchLabel 

SwitchStatement ::=
   'switch' '(' Expression ')' SwitchBlock 

SynchronizedStatement ::=
   'synchronized' '(' Expression ')' Block 

ThrowStatement ::=
   'throw' Expression ';' 

Throws ::=
   'throws' ClassTypeList 

TryStatement ::=
   'try' Block Catches |
   'try' Block Finally |
   'try' Block Catches Finally 

Type ::=
   PrimitiveType |
   ReferenceType 

TypeDeclaration ::=
   ClassDeclaration |
   InterfaceDeclaration |
   ';' 

TypeDeclarations ::=
   TypeDeclaration |
   TypeDeclarations TypeDeclaration 

TypeImportOnDemandDeclaration ::=
   'import' Name '.' '*' ';' 

UnaryExpression ::=
   PreIncrementExpression |
   PreDecrementExpression |
   '+' UnaryExpression |
   '-' UnaryExpression |
   UnaryExpressionNotPlusMinus 

UnaryExpressionNotPlusMinus ::=
   PostfixExpression |
   '~' UnaryExpression |
   '!' UnaryExpression |
   CastExpression 

VariableDeclarator ::=
   VariableDeclaratorId |
   VariableDeclaratorId '=' VariableInitializer 

VariableDeclaratorId ::=
   'ID' |
   VariableDeclaratorId '[' ']' 

VariableDeclarators ::=
   VariableDeclarator |
   VariableDeclarators ',' VariableDeclarator 

VariableInitializer ::=
   Expression |
   ArrayInitializer 

VariableInitializers ::=
   VariableInitializer |
   VariableInitializers ',' VariableInitializer 

WhileStatement ::=
   'while' '(' Expression ')' Statement 

WhileStatementNoShortIf ::=
   'while' '(' Expression ')' StatementNoShortIf 

 