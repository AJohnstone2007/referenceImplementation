

(* ART3 grammar generated by ART from 'jls2V2.art' on May 13 2018 10:57:01 *)

CompilationUnit ::=
   ART_C_1 ART_C_2 |
   'package' QualifiedIdentifier ';' ART_C_1 ART_C_2 


ART_C_1 ::=
   ART_C_1 ImportDeclaration |
   # 

ART_C_10 ::=
   ART_C_10 '[' ']' |
   # 

ART_C_11 ::=
   ART_C_11 '[' Expression ']' |
   # 

ART_C_12 ::=
   ART_C_12 ',' VariableInitializer |
   # 

ART_C_13 ::=
   ART_C_13 BlockStatement |
   # 

ART_C_14 ::=
   ART_C_14 CatchClause |
   # 

ART_C_15 ::=
   ART_C_15 SwitchBlockStatementGroup |
   # 

ART_C_16 ::=
   ART_C_16 ',' StatementExpression |
   # 

ART_C_17 ::=
   ART_C_17 Modifier |
   # 

ART_C_18 ::=
   ART_C_18 ',' VariableDeclarator |
   # 

ART_C_19 ::=
   ART_C_19 ',' VariableDeclarator |
   # 

ART_C_2 ::=
   ART_C_2 TypeDeclaration |
   # 

ART_C_20 ::=
   ART_C_20 ',' ConstantDeclarator |
   # 

ART_C_21 ::=
   ART_C_21 '.' Identifier |
   # 

ART_C_22 ::=
   ART_C_22 ',' Type |
   # 

ART_C_23 ::=
   ART_C_23 ClassBodyDeclaration |
   # 

ART_C_24 ::=
   ART_C_24 InterfaceBodyDeclaration |
   # 

ART_C_25 ::=
   ART_C_25 ',' QualifiedIdentifier |
   # 

ART_C_26 ::=
   ART_C_26 ',' FormalParameter |
   # 

ART_C_3 ::=
   ART_C_3 '.' Identifier |
   # 

ART_C_4 ::=
   ART_C_4 '.' Identifier |
   # 

ART_C_5 ::=
   ART_C_5 Infixop Expression3 |
   # 

ART_C_6 ::=
   ART_C_6 Selector |
   # 

ART_C_7 ::=
   ART_C_7 PostfixOp |
   # 

ART_C_8 ::=
   ART_C_8 '.' Identifier |
   # 

ART_C_9 ::=
   ART_C_9 ',' Expression |
   # 

Arguments ::=
   '(' ')' |
   '(' Expression ART_C_9 ')' 

ArgumentsOpt ::=
   # |
   Arguments 

ArrayCreatorRest ::=
   '[' ']' BracketsOpt ArrayInitializer |
   '[' Expression ']' ART_C_11 BracketsOpt 

ArrayInitializer ::=
   '{' '}' |
   '{' VariableInitializer ART_C_12 '}' |
   '{' VariableInitializer ART_C_12 ',' '}' 

AssignmentOperator ::=
   '=' |
   '+=' |
   '-=' |
   '*=' |
   '/=' |
   '&=' |
   '|=' |
   '^=' |
   '%=' |
   '<<=' |
   '>>=' |
   '>>>=' 

BasicType ::=
   'byte' |
   'short' |
   'char' |
   'int' |
   'long' |
   'float' |
   'double' |
   'boolean' 

Block ::=
   '{' BlockStatements '}' 

BlockStatement ::=
   LocalVariableDeclarationStatement |
   ClassOrInterfaceDeclaration |
   Statement |
   Identifier ':' Statement 

BlockStatements ::=
   ART_C_13 

BracketsOpt ::=
   ART_C_10 

CatchClause ::=
   'catch' '(' FormalParameter ')' Block 

Catches ::=
   CatchClause ART_C_14 

ClassBody ::=
   '{' ART_C_23 '}' 

ClassBodyDeclaration ::=
   ';' |
   ModifiersOpt MemberDecl |
   Block |
   'static' Block 

ClassCreatorRest ::=
   Arguments |
   Arguments ClassBody 

ClassDeclaration ::=
   'class' Identifier ClassBody |
   'class' Identifier 'implements' TypeList ClassBody |
   'class' Identifier 'extends' Type ClassBody |
   'class' Identifier 'extends' Type 'implements' TypeList ClassBody 

ClassOrInterfaceDeclaration ::=
   ModifiersOpt ClassDeclaration |
   ModifiersOpt InterfaceDeclaration 

ConstantDeclarator ::=
   Identifier ConstantDeclaratorRest 

ConstantDeclaratorRest ::=
   BracketsOpt '=' VariableInitializer 

ConstantDeclaratorsRest ::=
   ConstantDeclaratorRest ART_C_20 

ConstantExpression ::=
   Expression 

ConstructorDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody 

Creator ::=
   QualifiedIdentifier ArrayCreatorRest |
   QualifiedIdentifier ClassCreatorRest 

Expression ::=
   Expression1 |
   Expression1 AssignmentOperator Expression 

Expression1 ::=
   Expression2 |
   Expression2 Expression1Rest 

Expression1Rest ::=
   # |
   '?' Expression ':' Expression1 

Expression2 ::=
   Expression3 |
   Expression3 Expression2Rest 

Expression2Rest ::=
   ART_C_5 |
   Expression3 'instanceof' Type 

Expression3 ::=
   PrefixOp Expression3 |
   '(' Expression |
   Type ')' Expression3 |
   Primary ART_C_6 ART_C_7 

ExpressionStatement ::=
   StatementExpression ';' 

ForInit ::=
   StatementExpression MoreStatementExpressions |
   Type VariableDeclarators |
   'final' Type VariableDeclarators 

ForUpdate ::=
   StatementExpression MoreStatementExpressions 

FormalParameter ::=
   Type VariableDeclaratorId |
   'final' Type VariableDeclaratorId 

FormalParameters ::=
   '(' ')' |
   '(' FormalParameter ART_C_26 ')' 

Identifier ::=
   'ID' 

IdentifierSuffix ::=
   Arguments |
   '[' ']' BracketsOpt '.' 'class' |
   '[' Expression ']' |
   '.' 'class' |
   '.' 'this' |
   '.' 'super' Arguments |
   '.' 'new' InnerCreator 

ImportDeclaration ::=
   'import' Identifier ART_C_21 ';' |
   'import' Identifier ART_C_21 '.' '*' ';' 

Infixop ::=
   '||' |
   '&&' |
   '|' |
   '^' |
   '&' |
   '==' |
   '!=' |
   '<' |
   '>' |
   '<=' |
   '>=' |
   '<<' |
   '>>' |
   '>>>' |
   '+' |
   '-' |
   '*' |
   '/' |
   '%' 

InnerCreator ::=
   Identifier ClassCreatorRest 

InterfaceBody ::=
   '{' ART_C_24 '}' 

InterfaceBodyDeclaration ::=
   ';' |
   ModifiersOpt InterfaceMemberDecl 

InterfaceDeclaration ::=
   'interface' Identifier InterfaceBody |
   'interface' Identifier 'extends' TypeList InterfaceBody 

InterfaceMemberDecl ::=
   InterfaceMethodOrFieldDecl |
   'void' Identifier VoidInterfaceMethodDeclaratorRest |
   ClassOrInterfaceDeclaration 

InterfaceMethodDeclaratorRest ::=
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

InterfaceMethodOrFieldDecl ::=
   Type Identifier InterfaceMethodOrFieldRest 

InterfaceMethodOrFieldRest ::=
   ConstantDeclaratorsRest ';' |
   InterfaceMethodDeclaratorRest 

Literal ::=
   'INTEGER' |
   'REAL' |
   'CHAR' |
   'STRING' |
   'true' |
   'false' |
   'null' 

LocalVariableDeclarationStatement ::=
   Type VariableDeclarators ';' |
   'final' Type VariableDeclarators ';' 

MemberDecl ::=
   MethodOrFieldDecl |
   'void' Identifier MethodDeclaratorRest |
   Identifier ConstructorDeclaratorRest |
   ClassOrInterfaceDeclaration 

MethodBody ::=
   Block 

MethodDeclaratorRest ::=
   FormalParameters BracketsOpt MethodBody |
   FormalParameters BracketsOpt ';' |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters BracketsOpt 'throws' QualifiedIdentifierList ';' 

MethodOrFieldDecl ::=
   Type Identifier MethodOrFieldRest 

MethodOrFieldRest ::=
   VariableDeclaratorsRest |
   MethodDeclaratorRest 

Modifier ::=
   'public' |
   'protected' |
   'private' |
   'static' |
   'abstract' |
   'final' |
   'native' |
   'synchronized' |
   'transient' |
   'volatile' |
   'strictfp' 

ModifiersOpt ::=
   ART_C_17 

MoreStatementExpressions ::=
   ART_C_16 

ParExpression ::=
   '(' Expression ')' 

PostfixOp ::=
   '++' |
   '--' 

PrefixOp ::=
   '++' |
   '--' |
   '!' |
   '~' |
   '+' |
   '-' 

Primary ::=
   '(' Expression ')' |
   'super' SuperSuffix |
   Literal |
   'new' Creator |
   BasicType BracketsOpt '.' 'class' |
   'void.class' |
   'this' |
   'this' Arguments |
   Identifier ART_C_8 |
   Identifier ART_C_8 IdentifierSuffix 

QualifiedIdentifier ::=
   Identifier ART_C_3 

QualifiedIdentifierList ::=
   QualifiedIdentifier ART_C_25 

Selector ::=
   '.' 'this' |
   '.' 'super' SuperSuffix |
   '.' 'new' InnerCreator |
   '[' Expression ']' |
   '.' Identifier |
   '.' Identifier Arguments 

Statement ::=
   Block |
   'while' ParExpression Statement |
   'do' Statement 'while' ParExpression ';' |
   'switch' ParExpression '{' SwitchBlockStatementGroups '}' |
   'synchronized' ParExpression Block |
   'throw' Expression ';' |
   ';' |
   ExpressionStatement |
   Identifier ':' Statement |
   'if' ParExpression Statement |
   'if' ParExpression Statement 'else' Statement |
   'try' Block Catches |
   'return' ';' |
   'return' Expression ';' |
   'break' |
   'break' Identifier |
   'continue' |
   'continue' Identifier |
   'try' Block 'finally' Block |
   'try' Block Catches 'finally' Block |
   'for' '(' ';' ';' ')' Statement |
   'for' '(' ';' ';' ForUpdate ')' Statement |
   'for' '(' ';' Expression ';' ')' Statement |
   'for' '(' ';' Expression ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' ';' ')' Statement |
   'for' '(' ForInit ';' ';' ForUpdate ')' Statement |
   'for' '(' ForInit ';' Expression ';' ')' Statement |
   'for' '(' ForInit ';' Expression ';' ForUpdate ')' Statement 

StatementExpression ::=
   Expression 

SuperSuffix ::=
   Arguments |
   '.' Identifier |
   '.' Identifier Arguments 

SwitchBlockStatementGroup ::=
   SwitchLabel BlockStatements 

SwitchBlockStatementGroups ::=
   ART_C_15 

SwitchLabel ::=
   'case' ConstantExpression ':' |
   'default' ':' 

Type ::=
   Identifier ART_C_4 BracketsOpt |
   BasicType 

TypeDeclaration ::=
   ClassOrInterfaceDeclaration |
   ';' 

TypeList ::=
   Type ART_C_22 

VariableDeclarator ::=
   Identifier VariableDeclaratorRest 

VariableDeclaratorId ::=
   Identifier BracketsOpt 

VariableDeclaratorRest ::=
   BracketsOpt |
   BracketsOpt '=' VariableInitializer 

VariableDeclarators ::=
   VariableDeclarator ART_C_18 

VariableDeclaratorsRest ::=
   VariableDeclaratorRest ART_C_19 

VariableInitializer ::=
   ArrayInitializer |
   Expression 

VoidInterfaceMethodDeclaratorRest ::=
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList ';' 

VoidMethodDeclaratorRest ::=
   FormalParameters MethodBody |
   FormalParameters ';' |
   FormalParameters 'throws' QualifiedIdentifierList MethodBody |
   FormalParameters 'throws' QualifiedIdentifierList ';' 


 