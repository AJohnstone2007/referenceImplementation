!whitespace &SIMPLE_WHITESPACE
!whitespace &COMMENT_NEST_ART 
!whitespace &COMMENT_LINE_C 

text ::= directive^^ | directive text^ | cfgRule^^ | cfgRule text^

directive ::= 
  '!selfTest' | '!tortureTest' 
| '!gllBaseLine' | '!gllHashPool' | '!gllBitArray'
| '!rdsobFunction' | '!rdsobExplicitStack' | '!rdsobGenerator'
| '!report' | '!show' | '!statisticsHeader' | '!statistics'
| '!whitespace' cfgCaseSensitiveTerminal
| '!whitespace' cfgBuiltinTerminal

cfgRule  ::= cfgLHS '::='^ cfgAlts^
cfgLHS ::= &ID

cfgAlts ::= cfgAlt | cfgAlt '|'^ cfgAlts^
cfgAlt  ::= cfgSeq^^ cfgActions cfgEpsilon | cfgSeq^^ cfgActions cfgEpsilonCarrier | cfgSeq^^ cfgElems^ cfgActions (* final actions in sequence *)
cfgEpsilonCarrier ::= cfgEpsilon cfgAnnotation^^

cfgAltNoAction ::= cfgSeq^^ cfgSlot cfgPrim cfgSlot // This matches a single element with no actions allowed for use in abbreviated Kleene operations

cfgElems ::= cfgActions cfgExtended | cfgActions cfgExtended cfgElems^ 

cfgExtended ::= cfgPrim^^ | cfgPrim cfgAnnotation^^ | cfgDoFirst^^ | cfgOptional^^ | cfgKleene^^ | cfgPositive^^

cfgAnnotation ::= cfgFoldUnder^^ | cfgFoldOver^^
cfgFoldUnder ::= '^'^
cfgFoldOver ::= '^^'^
 
cfgDoFirst  ::= '('^ cfgAlts^ ')'^  
cfgOptional ::= '('^ cfgAlts^ ')'^ '?'^ | cfgAltNoAction '?'^ 
cfgPositive ::= '('^ cfgAlts^ ')'^ '+'^ | cfgAltNoAction '+'^ 
cfgKleene   ::= '('^ cfgAlts^ ')'^ '*'^ | cfgAltNoAction '*'^ 

cfgPrim ::= cfgNonterminal^^ | cfgCaseSensitiveTerminal^^ | cfgBuiltinTerminal^^ 
cfgNonterminal ::= &ID
cfgCaseSensitiveTerminal ::= &STRING_PLAIN_SQ
cfgBuiltinTerminal ::= '&'^ &ID
cfgEpsilon ::= '#'^

cfgActions ::= cfgSlot^^ | cfgSlot^^ cfgActionSeq^
cfgActionSeq ::= cfgAction | cfgAction cfgActionSeq^
cfgAction  ::= cfgEquation^^ | cfgAssignment^^ | cfgInsert
cfgEquation ::= cfgAttribute '='^ term
cfgAssignment ::= cfgAttribute ':='^ term
cfgInsert ::= '^+'^ &ID
cfgAttribute ::= &ID '.'^ &ID 

cfgSeq ::= #^ // Dirty trick: both cfgAlt and cfgAltNoAction promote cfgSeq to achieve gather operation
cfgSlot ::= #^

term ::= cfgAttribute^^ | &INTEGER^^ | &REAL^^ | &STRING_DQ^^ | &ID^^ '('^ ')'^ | &ID^^ '('^ arguments ')'^
arguments ::= term | term ','^ arguments^

