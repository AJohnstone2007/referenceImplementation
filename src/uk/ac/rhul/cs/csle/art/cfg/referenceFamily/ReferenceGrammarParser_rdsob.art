(* reference implementation grammar for rdsob parsers *)
(* This grammar has a rather unusual form suitable for use when bootstrapping via the rdsob style parsers

1. There are no left recursive rules
2. Alterates are listed in decreasing length order
3. A !nop directive is inserted before each left hand side so as to avoid the LHS nonterminal being ansorbed by the previous RHS rule

*)

!rdsobFunction
!whitespace (&SIMPLE_WHITESPACE, &COMMENT_NEST_ART, &COMMENT_LINE_C) 

text ::= directive text^ | cfgRule text^ | directive^^ | cfgRule^^ 
!nop
directive ::= '!'^ term

!nop
cfgRule  ::= cfgLHS '::='^ cfgAlts^
!nop
cfgLHS ::= &ID

!nop
cfgAlts ::= cfgAlt '|'^ cfgAlts^ | cfgAlt
!nop
cfgAlt  ::= cfgSeq^^ cfgActions cfgEpsilonCarrier | cfgSeq^^ cfgActions cfgEpsilon | cfgSeq^^ cfgElems^ cfgActions (* final actions in sequence *)
!nop
cfgEpsilonCarrier ::= cfgEpsilon cfgAnnotation^^

!nop
cfgAltNoAction ::= cfgSeq^^ cfgSlot cfgPrim cfgSlot // This matches a single element with no actions allowed for use in abbreviated Kleene operations

!nop
cfgElems ::= cfgActions cfgExtended cfgElems^ | cfgActions cfgExtended 

!nop
cfgExtended ::= cfgPrim cfgAnnotation^^ | cfgPrim^^ | cfgOptional^^ | cfgKleene^^ | cfgPositive^^ | cfgDoFirst^^

!nop
cfgAnnotation ::= cfgFoldUnder^^ | cfgFoldOver^^
!nop
cfgFoldUnder ::= '^'^
!nop
cfgFoldOver ::= '^^'^
 
!nop
cfgDoFirst  ::= '('^ cfgAlts^ ')'^  
!nop
cfgOptional ::= '('^ cfgAlts^ ')'^ '?'^ | cfgAltNoAction '?'^ 
!nop
cfgPositive ::= '('^ cfgAlts^ ')'^ '+'^ | cfgAltNoAction '+'^ 
!nop
cfgKleene   ::= '('^ cfgAlts^ ')'^ '*'^ | cfgAltNoAction '*'^ 

!nop
cfgPrim ::= cfgNonterminal^^ | cfgCaseSensitiveTerminal^^ | cfgBuiltinTerminal^^ 
!nop
cfgNonterminal ::= &ID
!nop
cfgCaseSensitiveTerminal ::= &STRING_PLAIN_SQ
!nop
cfgBuiltinTerminal ::= '&'^ &ID
!nop
cfgEpsilon ::= '#'^

!nop
cfgActions ::= cfgSlot^^ cfgActionSeq^ | cfgSlot^^ 
!nop
cfgActionSeq ::= cfgAction cfgActionSeq^ | cfgAction
!nop
cfgAction  ::= cfgEquation^^ | cfgAssignment^^ | cfgInsert
!nop
cfgEquation ::= cfgAttribute '='^ term
!nop
cfgAssignment ::= cfgAttribute ':='^ term
!nop
cfgInsert ::= '^+'^ &ID
!nop
cfgAttribute ::= &ID '.'^ &ID 

!nop
cfgSeq ::= #^ // Dirty trick: both cfgAlt and cfgAltNoAction promote cfgSeq to achieve gather operation
!nop
cfgSlot ::= #^

!nop
term ::= cfgAttribute^^ | &INTEGER^^ | &REAL^^ | &STRING_DQ^^ | cfgBuiltinTerminal^^ | &ID^^ '('^ arguments^ ')'^  | &ID^^ '('^ ')'^ | &ID^^
!nop
arguments ::= term ','^ arguments^ | term 

