package uk.ac.rhul.cs.csle.art.old.core;

/* This is the repository for ART script specifications and script tems
 *
 * A script term T_i is a derivation formed from using a version of the ART script grammar A_i as both input grammar and input string
 *
 * The process for extending an ART script grammar A_i is as follows
 *
 * We assume the availability of both the ART specification A_i and the corresponding derivation term T_i of A_i in L(A_i)
 *
 * Closure check: run gllbl with a grammar built from T_i and an input string of A_i, and ensure that the derivation term and the script term are the same
 *
 * Create A_(i+1) from A_i using a text editor
 *
 * Run gllbl with grammar built from T_i on A_(i+1) and save optout term as T_(i+1)
 *
 * Closure check: run gllbl with a grammar built from T_(i+1) and an input string of A_(i+1), and ensure that the derivation term and the script term are the same
 *
 * The initial term, T_0, was created by the V3 parser generated from
 *
 */
public class ARTV4ScriptTerm {
  //@formatter:off

public String t2 = "text(cfgRule(cfgLHS(text), cfgSeq(cfgSlot, cfgNonterminal(textElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(textElement), cfgSlot, cfgNonterminal(text), cfgSlot)), text(cfgRule(cfgLHS(textElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), text(cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:\\:=')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), text(cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('|')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), text(cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), text(cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), text(cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), text(cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot)), text(cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot)), text(cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), text(cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^')), cfgSlot)), text(cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^^')), cfgSlot)), text(cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot)), text(cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('?')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('?')), cfgSlot)), text(cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('+')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('+')), cfgSlot)), text(cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\*')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\*')), cfgSlot)), text(cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), text(cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), text(cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('&')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('#')), cfgSlot)), text(cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot)), text(cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot)), text(cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), text(cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(term), cfgSlot)), text(cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:=')), cfgSlot, cfgNonterminal(term), cfgSlot)), text(cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^+')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), text(cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), text(cfgRule(cfgLHS(term), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(INTEGER)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(REAL)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgNonterminal(arguments), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot)), text(cfgRule(cfgLHS(arguments), cfgSeq(cfgSlot, cfgNonterminal(term), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(term), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(arguments)), cfgSlot)), text(cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('z1'), cfgSlot)), text(cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('z2'), cfgSlot)), text(cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('!')), cfgSlot, cfgCaseSensitiveTerminal('whitespace'), cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot))))))))))))))))))))))))))))))))))))))";

public String t3 = "text(cfgRule(cfgLHS(text), cfgSeq(cfgSlot, cfgNonterminal(textElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(textElement), cfgSlot, cfgNonterminal(text), cfgSlot)), text(cfgRule(cfgLHS(textElement), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseRule)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(directive)), cfgSlot)), text(cfgRule(cfgLHS(cfgRules), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgRule)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgRule), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgRules)), cfgSlot)), text(cfgRule(cfgLHS(cfgRule), cfgSeq(cfgSlot, cfgNonterminal(cfgLHS), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:\\:=')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), text(cfgRule(cfgLHS(cfgLHS), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgAlts), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAlt), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('|')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot)), text(cfgRule(cfgLHS(cfgAlt), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgEpsilonCarrier), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot, cfgNonterminal(cfgActions), cfgSlot)), text(cfgRule(cfgLHS(cfgEpsilonCarrier), cfgSeq(cfgSlot, cfgNonterminal(cfgEpsilon), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot)), text(cfgRule(cfgLHS(cfgAltNoAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSeq)), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgNonterminal(cfgSlot), cfgSlot)), text(cfgRule(cfgLHS(cfgElems), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgActions), cfgSlot, cfgNonterminal(cfgExtended), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElems)), cfgSlot)), text(cfgRule(cfgLHS(cfgExtended), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPrim)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgPrim), cfgSlot, cfgFoldOver(cfgNonterminal(cfgAnnotation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgDoFirst)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgOptional)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgKleene)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgPositive)), cfgSlot)), text(cfgRule(cfgLHS(cfgAnnotation), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldUnder)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgFoldOver)), cfgSlot)), text(cfgRule(cfgLHS(cfgFoldUnder), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^')), cfgSlot)), text(cfgRule(cfgLHS(cfgFoldOver), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^^')), cfgSlot)), text(cfgRule(cfgLHS(cfgDoFirst), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot)), text(cfgRule(cfgLHS(cfgOptional), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('?')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('?')), cfgSlot)), text(cfgRule(cfgLHS(cfgPositive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('+')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('+')), cfgSlot)), text(cfgRule(cfgLHS(cfgKleene), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgAlts)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\*')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAltNoAction), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\*')), cfgSlot)), text(cfgRule(cfgLHS(cfgPrim), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgNonterminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgCaseSensitiveTerminal)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgBuiltinTerminal)), cfgSlot)), text(cfgRule(cfgLHS(cfgNonterminal), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgCaseSensitiveTerminal), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ), cfgSlot)), text(cfgRule(cfgLHS(cfgBuiltinTerminal), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('&')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgEpsilon), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('#')), cfgSlot)), text(cfgRule(cfgLHS(cfgActions), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgSlot)), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot)), text(cfgRule(cfgLHS(cfgActionSeq), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgAction), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgActionSeq)), cfgSlot)), text(cfgRule(cfgLHS(cfgAction), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgEquation)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAssignment)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgInsert), cfgSlot)), text(cfgRule(cfgLHS(cfgEquation), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(term), cfgSlot)), text(cfgRule(cfgLHS(cfgAssignment), cfgSeq(cfgSlot, cfgNonterminal(cfgAttribute), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:=')), cfgSlot, cfgNonterminal(term), cfgSlot)), text(cfgRule(cfgLHS(cfgInsert), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('^+')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgAttribute), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(cfgSeq), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), text(cfgRule(cfgLHS(cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon))), text(cfgRule(cfgLHS(term), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(cfgAttribute)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(INTEGER)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(REAL)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgNonterminal(arguments), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot)), text(cfgRule(cfgLHS(arguments), cfgSeq(cfgSlot, cfgNonterminal(term), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(term), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(arguments)), cfgSlot)), text(cfgRule(cfgLHS(trRule), cfgSeq(cfgSlot, cfgNonterminal(trLabel), cfgSlot, cfgNonterminal(tr), cfgSlot)), text(cfgRule(cfgLHS(trLabel), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('-')), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('-')), cfgSlot, cfgNonterminal(STRING\\_DQ), cfgSlot)), text(cfgRule(cfgLHS(tr), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('---')), cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgNonterminal(trEquations), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trPremises), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('---')), cfgSlot, cfgNonterminal(trTransition), cfgSlot)), text(cfgRule(cfgLHS(trPremises), cfgSeq(cfgSlot, cfgFoldUnder(cfgEpsilon)), cfgSeq(cfgSlot, cfgNonterminal(trTransition), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trMatch), cfgSlot, cfgFoldUnder(cfgNonterminal(trPremises)), cfgSlot)), text(cfgRule(cfgLHS(trTransition), cfgSeq(cfgSlot, cfgNonterminal(trConfiguration), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot, cfgNonterminal(trConfiguration), cfgSlot)), text(cfgRule(cfgLHS(trConfiguration), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trTerm)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(trEntityReferences)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('<')), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(trEntityReferences)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('>')), cfgSlot)), text(cfgRule(cfgLHS(trEntityReferences), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(trEntityReferences)), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trNamedTerm), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trNamedTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(trEntityReferences)), cfgSlot)), text(cfgRule(cfgLHS(trNamedTerm), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), text(cfgRule(cfgLHS(trMatch), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('|>')), cfgSlot, cfgNonterminal(trTerm), cfgSlot)), text(cfgRule(cfgLHS(trTerm), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_int32)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_real64)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_string)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(\\_\\_char)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(ID)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgFoldUnder(cfgNonterminal(trSubterms)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID\\_ATTRIBUTE), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), text(cfgRule(cfgLHS(trSubterms), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(trSubterms)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgNonterminal(trSubterms)), cfgSlot)), text(cfgRule(cfgLHS(trEquations), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('zzz'), cfgSlot)), text(cfgRule(cfgLHS(chooseRule), cfgSeq(cfgSlot, cfgNonterminal(chooseDiff), cfgSlot, cfgNonterminal(chooserOp), cfgSlot, cfgNonterminal(chooseDiff), cfgSlot)), text(cfgRule(cfgLHS(chooseDiff), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseUnionIntersection)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseDiff), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\\\\\\\')), cfgSlot, cfgNonterminal(chooseUnionIntersection), cfgSlot)), text(cfgRule(cfgLHS(chooseUnionIntersection), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseElement)), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseUnionIntersection), cfgSlot, cfgFoldOver(cfgNonterminal(chooseUnion)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(chooseUnionIntersection), cfgSlot, cfgFoldOver(cfgNonterminal(chooseIntersection)), cfgSlot, cfgNonterminal(chooseElement), cfgSlot)), text(cfgRule(cfgLHS(chooseUnion), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('|')), cfgSlot)), text(cfgRule(cfgLHS(chooseIntersection), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('/')), cfgSlot)), text(cfgRule(cfgLHS(chooseElement), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgCaseSensitiveTerminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(choosePredefinedSet), cfgSlot), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\(')), cfgSlot, cfgNonterminal(chooseDiff), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\)')), cfgSlot)), text(cfgRule(cfgLHS(choosePredefinedSet), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyCharacterTerminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyBuiltinTerminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyCaseSensitiveTerminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyCaseInsensitiveTerminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyNonterminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyParaterminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyLiteralTerminal'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('anyTerminal'), cfgSlot)), text(cfgRule(cfgLHS(chooserOp), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseHigher)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLower)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseLonger)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(chooseShorter)), cfgSlot)), text(cfgRule(cfgLHS(chooseHigher), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('>')), cfgSlot)), text(cfgRule(cfgLHS(chooseLower), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('<')), cfgSlot)), text(cfgRule(cfgLHS(chooseLonger), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('>>')), cfgSlot)), text(cfgRule(cfgLHS(chooseShorter), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('<<')), cfgSlot)), text(cfgRule(cfgLHS(idART), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.art')), cfgSlot)), text(cfgRule(cfgLHS(idRAW), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.raw')), cfgSlot)), text(cfgRule(cfgLHS(idJAVA), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.java')), cfgSlot)), text(cfgRule(cfgLHS(idSML), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.sml')), cfgSlot)), text(cfgRule(cfgLHS(directive), cfgSeq(cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('!')), cfgSlot, cfgFoldUnder(cfgNonterminal(directiveName)), cfgSlot)), text(cfgRule(cfgLHS(directiveName), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('merge'), cfgSlot, cfgNonterminal(idART), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('module'), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('use'), cfgSlot, cfgNonterminal(useElements), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('v3'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('v4'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('v4old'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('grammarWrite'), cfgSlot, cfgNonterminal(idART), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('termTool'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('unicodeAsEscapeSequences'), cfgSlot, cfgNonterminal(idJAVA), cfgSlot, cfgNonterminal(idJAVA), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('compressWhitespaceJava'), cfgSlot, cfgNonterminal(idJAVA), cfgSlot, cfgNonterminal(idJAVA), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('compressWhitespaceSML'), cfgSlot, cfgNonterminal(idSML), cfgSlot, cfgNonterminal(idSML), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('extractJLS'), cfgSlot, cfgNonterminal(idRAW), cfgSlot, cfgNonterminal(idRAW), cfgSlot, cfgNonterminal(idRAW), cfgSlot, cfgNonterminal(idART), cfgSlot, cfgNonterminal(ID), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgElements'), cfgSlot, cfgNonterminal(cfgElementDeclarations), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('paraterminal'), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalisers)), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('latex'), cfgSlot, cfgNonterminal(latexDeclarations), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('verbosity'), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('statistics'), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('trace'), cfgSlot, cfgNonterminal(\\_\\_int32), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgFBNF'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgBNF'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgAugment'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgTerminalise'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgTwoForm'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgRemoveEpsilon'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgRemoveUnit'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('cfgCNF'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('lexDFA'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('lexGLL'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('lexHardCoded'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('lexWSSuffix'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('whitespace'), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('whitespace'), cfgSlot, cfgNonterminal(cfgBuiltinTerminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('absorb'), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('absorb'), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('#')), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweTokenWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweLexicalisations'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweExtents'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweSegments'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweRecursive'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweLongest'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('twePriority'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweDead'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweCounts'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('twePrintFull'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('twePrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweShow'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('tweDump'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseSML97'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseJLS18BNF'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseOSBRD'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseTwoFormMemo'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseEarley2007'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseEarley'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseEarleyTable'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseCNP'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseLCNP'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLL'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLTWE'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLClustered'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseMGLL'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLPredictivePops'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLFIFODescriptors'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLSuppressPopGuard'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLSuppressProductionGuard'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLSuppressTestRepeat'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGLLSuppressSemantics'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseControlTerm'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseControlTable'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseSupportAPI'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseSupportHashPool'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseInterpret'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerate'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseOutputDirectory'), cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseNamespace'), cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseName'), cfgSlot, cfgNonterminal(STRING\\_PLAIN\\_SQ), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateDynamic'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateStatic'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateState'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateFragment'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateJava'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateC++'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseGenerateML'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseFileInjection'), cfgSlot, cfgNonterminal(STRING\\_BRACE\\_NEST), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseClassInjection'), cfgSlot, cfgNonterminal(STRING\\_BRACE\\_NEST), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('parseCounts'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfLongest'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfPriority'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfToTWE'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('gssPrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('gssWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('gssShow'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfPrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('sppfShow'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('treePrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('treeWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('treeShow'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('termPrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('termWrite'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('termShow'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewriteConfiguration'), cfgSlot, cfgFoldUnder(cfgNonterminal(TRRELATION)), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trEntities), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewriteDisable'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewritePure'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewritePreorder'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewritePostorder'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewriteOneStep'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewriteResume'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('rewriteContractum'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('main'), cfgSlot, cfgNonterminal(idART), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('start'), cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('start'), cfgSlot, cfgNonterminal(TRRELATION), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('input'), cfgSlot, cfgNonterminal(tryArgument), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('inputPrint'), cfgSlot, cfgNonterminal(trueFalse), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('result'), cfgSlot, cfgNonterminal(tryArgument), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('try'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('try'), cfgSlot, cfgNonterminal(tryArgument), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('try'), cfgSlot, cfgNonterminal(tryArgument), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(tryArgument), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(ID), cfgSlot)), text(cfgRule(cfgLHS(trueFalse), cfgSeq(cfgSlot, cfgFoldOver(cfgEpsilon))), text(cfgRule(cfgLHS(tryArgument), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(STRING\\_PLAIN\\_SQ)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(STRING\\_DQ)), cfgSlot), cfgSeq(cfgSlot, cfgFoldOver(cfgNonterminal(trConfiguration)), cfgSlot)), text(cfgRule(cfgLHS(latexDeclarations), cfgSeq(cfgSlot, cfgNonterminal(latexDeclaration), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(latexDeclaration), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(latexDeclarations)), cfgSlot)), text(cfgRule(cfgLHS(latexDeclaration), cfgSeq(cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot)), text(cfgRule(cfgLHS(cfgElementDeclarations), cfgSeq(cfgSlot, cfgNonterminal(cfgElementDeclaration), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgElementDeclaration), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(cfgElementDeclarations)), cfgSlot)), text(cfgRule(cfgLHS(cfgElementDeclaration), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('xxx'), cfgSlot)), text(cfgRule(cfgLHS(paraterminalisers), cfgSeq(cfgSlot, cfgNonterminal(aliasedCFGNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(aliasedCFGNonterminal), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(paraterminalisers)), cfgSlot)), text(cfgRule(cfgLHS(aliasedCFGNonterminal), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(cfgNonterminal), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('=')), cfgSlot, cfgNonterminal(\\_\\_string), cfgSlot)), text(cfgRule(cfgLHS(useElements), cfgSeq(cfgSlot, cfgNonterminal(idART), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(idART), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgFoldUnder(cfgNonterminal(useElements)), cfgSlot)), text(cfgRule(cfgLHS(trEntities), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:')), cfgSlot, cfgNonterminal(trEntityKind), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trEntities), cfgSlot), cfgSeq(cfgSlot, cfgNonterminal(trTerm), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\:')), cfgSlot, cfgNonterminal(trEntityKind), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('\\,')), cfgSlot, cfgNonterminal(trEntities), cfgSlot)), text(cfgRule(cfgLHS(trEntityKind), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('map'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('mapFixed'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('listIn'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('listOut'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('singleton'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('untyped'), cfgSlot)), text(cfgRule(cfgLHS(\\_\\_char), cfgSeq(cfgSlot, cfgBuiltinTerminal(CHAR\\_BQ), cfgSlot)), text(cfgRule(cfgLHS(\\_\\_int32), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_INTEGER), cfgSlot)), text(cfgRule(cfgLHS(\\_\\_real64), cfgSeq(cfgSlot, cfgBuiltinTerminal(SIGNED\\_REAL), cfgSlot)), text(cfgRule(cfgLHS(\\_\\_string), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_DQ), cfgSlot), cfgSeq(cfgSlot, cfgBuiltinTerminal(STRING\\_SQ), cfgSlot)), text(cfgRule(cfgLHS(ID), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(ID)), cfgSlot)), text(cfgRule(cfgLHS(ID\\_ATTRIBUTE), cfgSeq(cfgSlot, cfgBuiltinTerminal(ID), cfgSlot, cfgFoldUnder(cfgCaseSensitiveTerminal('.')), cfgSlot, cfgBuiltinTerminal(ID), cfgSlot)), text(cfgRule(cfgLHS(STRING\\_DQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DQ)), cfgSlot)), text(cfgRule(cfgLHS(STRING\\_DOLLAR), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_DOLLAR)), cfgSlot)), text(cfgRule(cfgLHS(STRING\\_PLAIN\\_SQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_PLAIN\\_SQ)), cfgSlot)), text(cfgRule(cfgLHS(CHAR\\_BQ), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(CHAR\\_BQ)), cfgSlot)), text(cfgRule(cfgLHS(STRING\\_BRACE\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACE\\_NEST)), cfgSlot)), text(cfgRule(cfgLHS(STRING\\_BRACKET\\_NEST), cfgSeq(cfgSlot, cfgFoldOver(cfgBuiltinTerminal(STRING\\_BRACKET\\_NEST)), cfgSlot)), text(cfgRule(cfgLHS(TRRELATION), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('->'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('->\\*'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('->>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('=>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('=>\\*'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('=>>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-\\\\\\\\'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-\\\\\\\\\\*'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-\\\\\\\\>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-/'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-/\\*'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('-/>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('~>'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('~>\\*'), cfgSlot), cfgSeq(cfgSlot, cfgCaseSensitiveTerminal('~>>'), cfgSlot))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))";

public String scriptTermString = t3;
}