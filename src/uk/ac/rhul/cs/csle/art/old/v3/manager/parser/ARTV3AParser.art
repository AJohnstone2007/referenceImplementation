!whitespace &SIMPLE_WHITESPACE
!whitespace &COMMENT_NEST_ART 
!whitespace &COMMENT_LINE_C 

!start text

!prelude {
  import uk.ac.rhul.cs.csle.art.v3.value.ARTValueTerm;
  import uk.ac.rhul.cs.csle.art.v3.manager.module.*;
  import uk.ac.rhul.cs.csle.art.v3.manager.grammar.element.*;
}

!support { 
  ARTManager artManager; 
  ARTV3Module currentModule;
}

text <artManager: ARTManager> 
  ::= { artManager = text.artManager; currentModule = artManager.findModule("ART"); 
        if (artManager.getDefaultMainModule() == null) artManager.setDefaultMainModule(currentModule); 
      } 
      textElements 

textElements ::= textElement^ textElements^ | textElement^

textElement 
  ::= '!' directive
    | grammarRule 

directive 
  ::= 'import' ID 
    | 'v3' | 'v4' | 'v4old' // These is just to absorb the version selectors

    | 'element' elementUpdaters
    | 'start' nonterminal { currentModule.setDefaultStart(nonterminal1.v); }
    | 'whitespace' whitespacers
    | 'paraterminal' paraterminalisers
    | 'injectInstance' {rhs1.lhs = "ART_InjectInstance"; rhs1.isDeleter = false; } rhs 
    | 'injectProduction' {rhs1.lhs = "ART_InjectProduction"; rhs1.isDeleter = false; } rhs 
    | 'injectProductionOff' { currentModule.setInjectProductionString(""); } 
    | 'absorb' nonterminal {currentModule.setAbsorbNonterminal(nonterminal1.v); }
    | 'choose'    { currentModule.currentChooserExpressions = currentModule.findChooserExpressions(""); }    choosers
    | 'choose' ID { currentModule.currentChooserExpressions = currentModule.findChooserExpressions(ID1.v); } choosers

    (* Native language extras *)
    | 'prelude' STRING_BRACE_NEST { currentModule.addPreludeString(STRING_BRACE_NEST1.v); }
    | 'support' STRING_BRACE_NEST { currentModule.addSupportString(STRING_BRACE_NEST1.v); } 

    (* Manager level options *)
    | 'verbosity' optionalColon INTEGER      { artManager.artDirectives.set("verbosity", INTEGER1.v); }
    | 'trace' trueFalse                      { artManager.artDirectives.set("trace", trueFalse1.v); }
      
    (* Lexer control options *)                                                      
    | 'inputPrint' trueFalse                 { artManager.artDirectives.set("inputPrint", trueFalse1.v); }
    | 'tweLexicalisations' trueFalse         { artManager.artDirectives.set("tweLexicalisations", trueFalse1.v); }
    | 'tweLexicalisationsQuick' trueFalse    { artManager.artDirectives.set("tweLexicalisationsQuick", trueFalse1.v); }
    | 'tweExtents' trueFalse                 { artManager.artDirectives.set("tweExtents", trueFalse1.v); }
    | 'tweSegments' trueFalse                { artManager.artDirectives.set("tweSegments", trueFalse1.v); }
    | 'tweRecursive' trueFalse               { artManager.artDirectives.set("tweRecursive", trueFalse1.v); }
    | 'tweCounts' trueFalse                  { artManager.artDirectives.set("tweCounts", trueFalse1.v); }
    | 'twePrint' trueFalse                   { artManager.artDirectives.set("twePrint", trueFalse1.v); }
    | 'twePrintFull' trueFalse               { artManager.artDirectives.set("twePrintFull", trueFalse1.v); }

    | 'tweDead' trueFalse                    { artManager.artDirectives.set("tweDead", trueFalse1.v); }
    | 'tweLongest' trueFalse                 { artManager.artDirectives.set("tweLongest", trueFalse1.v); }
    | 'twePriority' trueFalse                { artManager.artDirectives.set("twePriority", trueFalse1.v); }

    | 'sppfLongest' trueFalse                { artManager.artDirectives.set("sppfLongest", trueFalse1.v); }
    | 'sppfPriority' trueFalse               { artManager.artDirectives.set("sppfPriority", trueFalse1.v); }

    | 'sppfCycleDetect' trueFalse            { artManager.artDirectives.set("sppfCycleDetect", trueFalse1.v); }
    | 'smlCycleBreak' trueFalse              { artManager.artDirectives.set("smlCycleBreak", trueFalse1.v); }

    | 'tweFromSPPF' trueFalse                { artManager.artDirectives.set("tweFromSPPF", trueFalse1.v); }
    | 'tweTokenWrite' trueFalse              { artManager.artDirectives.set("tweTokenWrite", trueFalse1.v); }

    (* Outputs *)                                                      
    | 'sppfShow' trueFalse                   { artManager.artDirectives.set("sppfShow", trueFalse1.v); }
    | 'gssShow' trueFalse                    { artManager.artDirectives.set("gssShow", trueFalse1.v); }
    | 'treeShow' trueFalse                   { artManager.artDirectives.set("treeShow", trueFalse1.v); }
    | 'treePrint' trueFalse                  { artManager.artDirectives.set("treePrint", trueFalse1.v); }
    | 'termPrint' trueFalse                  { artManager.artDirectives.set("termPrint", trueFalse1.v); }
    | 'termWrite' trueFalse                  { artManager.artDirectives.set("termWrite", trueFalse1.v); }
    | 'parseCounts' trueFalse                { artManager.artDirectives.set("parseCounts", trueFalse1.v); }

    (* Generated parser options *)
    | 'outputDirectory' optionalColon STRING_PLAIN_SQ      { artManager.artDirectives.set("outputDirectory", STRING_PLAIN_SQ1.v); }
    | 'namespace' optionalColon STRING_PLAIN_SQ            { artManager.artDirectives.set("namespace", STRING_PLAIN_SQ1.v); }
    | 'lexerName' optionalColon STRING_PLAIN_SQ            { artManager.artDirectives.set("lexerName", STRING_PLAIN_SQ1.v); }
    | 'parserName' optionalColon STRING_PLAIN_SQ           { artManager.artDirectives.set("parserName", STRING_PLAIN_SQ1.v); }

    | 'generateDynamic'                      { artManager.artDirectives.set("despatchMode", ARTModeDespatch.dynamic); }
    | 'generateStatic'                       { artManager.artDirectives.set("despatchMode", ARTModeDespatch.static_); }
    | 'generateState'                        { artManager.artDirectives.set("despatchMode", ARTModeDespatch.state); }
    | 'generateFragment'                     { artManager.artDirectives.set("despatchMode", ARTModeDespatch.fragment); }
    | 'generatePool'                         { artManager.artDirectives.set("supportMode", ARTModeSupport.HashPool); }

    (* GLL experimental options *)
    | 'predictivePops' trueFalse             { artManager.artDirectives.set("predictivePops", trueFalse1.v); }
    | 'FIFODescriptors' trueFalse            { artManager.artDirectives.set("FIFODescriptors", trueFalse1.v); }
    | 'suppressPopGuard' trueFalse           { artManager.artDirectives.set("suppressPopGuard", trueFalse1.v); }
    | 'suppressProductionGuard' trueFalse    { artManager.artDirectives.set("suppressProductionGuard", trueFalse1.v); }
    | 'suppressTestRepeat' trueFalse         { artManager.artDirectives.set("suppressTestRepeat", trueFalse1.v); }
    | 'suppressSemantics' trueFalse          { artManager.artDirectives.set("suppressSemantics", trueFalse1.v); }

    (* Algorithm selection options *)
    | 'lexerData'                            { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lexerData); }
    | 'lexDFA'                               { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lexDFA); }
      
    | 'earley'                               { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyLinkedAPI); }
    | 'earley2007LinkedAPI'                  { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earley2007LinkedAPI); }
    | 'earleyLinkedAPI'                      { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyLinkedAPI); }
    | 'earleyIndexedAPI'                     { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedAPI); }
    | 'earleyIndexedPool'                    { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedPool); }
    | 'earleyIndexedData'                    { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyIndexedData); }

    | 'earleyTable'                          { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableLinkedAPI); }
    | 'earleyTableLinkedAPI'                 { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableLinkedAPI); }
    | 'earleyTableIndexedAPI'                { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedAPI); }
    | 'earleyTableIndexedPool'               { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedPool); }
    | 'earleyTableIndexedData'               { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.earleyTableIndexedData); }
            
    | 'cnp'                                  { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpLinkedAPI); }
    | 'cnpLinkedAPI'                         { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpLinkedAPI); }
    | 'cnpIndexedAPI'                        { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpIndexedAPI); }
    | 'cnpIndexedPool'                       { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpIndexedPool); }
    | 'cnpGeneratorPool'                     { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.cnpGeneratorPool); }
      
    | 'lcnp'                                 { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpLinkedAPI); }
    | 'lcnpLinkedAPI'                        { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpLinkedAPI); }
    | 'lcnpIndexedAPI'                       { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpIndexedAPI); }
    | 'lcnpIndexedPool'                      { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpIndexedPool); }
    | 'lcnpGeneratorPool'                    { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.lcnpGeneratorPool); }
      
    | 'gll'                                  { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); }
    | 'gllGeneratorPool'                     { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); }
    | 'gllTWEGeneratorPool'                  { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllTWEGeneratorPool); }
    | 'gllClusteredGeneratorPool'            { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.gllGeneratorPool); artManager.artDirectives.set("clusteredGSS", true); }

    | 'mgll'                                 { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.mgllGeneratorPool); }
    | 'mgllGeneratorPool'                    { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.mgllGeneratorPool); }

    | 'osbrd'                                { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.osbrdGenerator); }
    | 'osbrdGenerator'                       { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.osbrdGenerator); }

    | 'grammarWrite'                         { artManager.artDirectives.set("algorithmMode", ARTModeAlgorithm.grammarWrite); }

trueFalse <v:boolean> 
  ::= # { trueFalse.v = true; }
    | 'true' { trueFalse.v = true; }
    | 'false' { trueFalse.v = false; }
    | ':'^ 'true' { trueFalse.v = true; }
    | ':'^ 'false' { trueFalse.v = false; }

optionalColon ::= ':' | #

elementUpdaters ::= elementUpdater ',' elementUpdaters | elementUpdater 

elementUpdater
  ::= epsilon  { currentModule.addElement(new ARTGrammarElementEpsilon()); }
    | nonterminal { currentModule.addElement(new ARTGrammarElementNonterminal(currentModule, nonterminal1.v)); }
    | caseSensitiveTerminal { currentModule.addElement(new ARTGrammarElementTerminalCaseSensitive(caseSensitiveTerminal1.v)); }
    | caseInsensitiveTerminal { currentModule.addElement(new ARTGrammarElementTerminalCaseInsensitive(caseInsensitiveTerminal1.v)); }
    | characterTerminal { currentModule.addElement(new ARTGrammarElementTerminalCharacter(characterTerminal1.v)); }
    | characterSetTerminal { currentModule.addElement(new ARTGrammarElementTerminalCharacterSet(characterSetTerminal1.lo, characterSetTerminal1.hi)); }
    | builtinTerminal{ currentModule.addElement(new ARTGrammarElementTerminalBuiltin(builtinTerminal1.v)); }

paraterminalisers ::=
  nonterminal { currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); } 
| nonterminal { currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); } ',' paraterminalisers
| nonterminal { currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); } '=' STRING_DQ { currentModule.addParaterminalAlias(new ARTValueTerm(nonterminal1.v), STRING_DQ1.v); }
| nonterminal { currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); } '=' STRING_DQ { currentModule.addParaterminalAlias(new ARTValueTerm(nonterminal1.v), STRING_DQ1.v); } ',' paraterminalisers

whitespacers ::= whitespacer | whitespacer ',' whitespacers

whitespacer 
  ::= nonterminal     { currentModule.addWhiteSpaceTerminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v)));
                        currentModule.addParaterminal(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
    | builtinTerminal { currentModule.addWhiteSpaceTerminal(new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v))); }
    | characterTerminal { currentModule.addWhiteSpaceTerminal(new ARTValueTerm("characterTerminal", new ARTValueTerm(characterTerminal1.v))); }
    
choosers 
  ::= chooser { if (chooser1.v != null) currentModule.currentChooserExpressions.add(chooser1.v); }
    | chooser { if (chooser1.v != null) currentModule.currentChooserExpressions.add(chooser1.v); } choosers

chooser<v:String>
  ::= chooseDiff '>' chooseDiff  { chooser.v = "chooseHigher("  + chooseDiff1.v + "," + chooseDiff2.v + ")"; }
    | chooseDiff '<' chooseDiff  { chooser.v = "chooseHigher("  + chooseDiff2.v + "," + chooseDiff1.v + ")"; }
    | chooseDiff '>>' chooseDiff { chooser.v = "chooseLonger("  + chooseDiff1.v + "," + chooseDiff2.v + ")"; }
    | chooseDiff '<<' chooseDiff { chooser.v = "chooseShorter(" + chooseDiff1.v + "," + chooseDiff2.v + ")"; }
    | 'longest' chooseDiff       { chooser.v = "chooseLonger("  + chooseDiff1.v + "," + chooseDiff1.v + ")"; }
    | 'shortest' chooseDiff      { chooser.v = "chooseShorter(" + chooseDiff1.v + "," + chooseDiff1.v + ")"; }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '>'
      { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot
      { currentModule.addDerivationHigher(choiceSlot1.t, choiceSlot2.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '>'
      nonterminal '::=' { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal2.v))); }
      choiceSlot
      { currentModule.addDerivationHigher(choiceSlot1.t, choiceSlot2.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '<'
      { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot
      { currentModule.addDerivationHigher(choiceSlot2.t, choiceSlot1.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '<'
      nonterminal '::=' { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal2.v))); }
      choiceSlot
      { currentModule.addDerivationHigher(choiceSlot2.t, choiceSlot1.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '>>'
      { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot
      { currentModule.addDerivationLonger(choiceSlot1.t, choiceSlot2.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '>>'
      nonterminal '::=' { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal2.v))); }
      choiceSlot
      { currentModule.addDerivationLonger(choiceSlot1.t, choiceSlot2.t); }

   | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '<<'
      { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot
      { currentModule.addDerivationShorter(choiceSlot1.t, choiceSlot2.t); }

    | nonterminal '::=' { choiceSlot1.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot '<<'
      nonterminal '::=' { choiceSlot2.t = new ARTValueTerm("chooseDerivation", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal2.v))); }
      choiceSlot
      { currentModule.addDerivationShorter(choiceSlot1.t, choiceSlot2.t); }

    | 'longest' nonterminal '::='
      { choiceSlot1.t = new ARTValueTerm("chooseDerivationAll", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot { currentModule.addDerivationLonger(choiceSlot1.t, choiceSlot1.t); }

    | 'shortest' nonterminal '::='
      { choiceSlot1.t = new ARTValueTerm("chooseDerivationAll", new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v))); }
      choiceSlot { currentModule.addDerivationShorter(choiceSlot1.t, choiceSlot1.t); }

choiceSlot<t:ARTValueTerm>::= 
  '#' 
| { choiceSlotElement1.t = choiceSlot.t; } choiceSlotElement 
|  { choiceSlotElement1.t = choiceSlot.t; choiceSlot1.t = choiceSlot.t; } choiceSlotElement choiceSlot

choiceSlotElement<t:ARTValueTerm> 
  ::= nonterminal { choiceSlotElement.t.addChild(new ARTValueTerm("nonterminal", new ARTValueTerm(nonterminal1.v)));  }
    | caseSensitiveTerminal { choiceSlotElement.t.addChild(new ARTValueTerm("caseSensitiveTerminal", new ARTValueTerm(caseSensitiveTerminal1.v))); }
    | caseInsensitiveTerminal { choiceSlotElement.t.addChild(new ARTValueTerm("caseInsensitiveTerminal", new ARTValueTerm(caseInsensitiveTerminal1.v))); }
    | characterTerminal { choiceSlotElement.t.addChild(new ARTValueTerm("characterTerminal", new ARTValueTerm(characterTerminal1.v))); }
    | characterSetTerminal { choiceSlotElement.t.addChild(new ARTValueTerm("characterSetTerminal", new ARTValueTerm(characterSetTerminal1.lo), new ARTValueTerm(characterSetTerminal1.hi))); }
    | builtinTerminal { choiceSlotElement.t.addChild(new ARTValueTerm("builtinTerminal", new ARTValueTerm(builtinTerminal1.v))); }
    | '.' { choiceSlotElement.t.addChild(new ARTValueTerm("slot")); }

chooseDiff<v:String> 
  ::= chooseUnionIntersection { chooseDiff.v = chooseUnionIntersection1.v; }      
    | chooseDiff '\' chooseUnionIntersection { chooseDiff.v = "__difference(" + chooseDiff1.v + ", " + chooseUnionIntersection1.v + ")"; }

chooseUnionIntersection<v:String>
  ::= chooseElement {chooseUnionIntersection.v = chooseElement1.v; } 
    | chooseUnionIntersection '|' chooseElement { chooseUnionIntersection.v = "__union(" + chooseUnionIntersection1.v + ", " + chooseElement1.v + ")"; }
    | chooseUnionIntersection '/' chooseElement { chooseUnionIntersection.v = "__intersection(" + chooseUnionIntersection1.v + ", " + chooseElement1.v + ")"; }

chooseElement<v:String> 
  ::= nonterminal             { chooseElement.v = "__set(srNonterminal(" + ITerms.escapeMeta(nonterminal1.v) + "))"; }
    | caseSensitiveTerminal   { chooseElement.v = "__set(srCaseSensitiveTerminal(" + ITerms.escapeMeta(caseSensitiveTerminal1.v) + "))"; }
    | caseInsensitiveTerminal { chooseElement.v = "__set(srCaseInsensitiveTerminal(" + ITerms.escapeMeta(caseInsensitiveTerminal1.v) + "))"; }
    | builtinTerminal         { chooseElement.v = "__set(srBuiltinTerminal(" + ITerms.escapeMeta(builtinTerminal1.v) + "))"; }
    | '.'                     { chooseElement.v = "__set(srSlot)"; }

    | 'anyCharacterTerminal'       { chooseElement.v = "_1"; } // variable 1 will be bound to all character (`) terminals that appear in the grammar
    | 'anyBuiltinTerminal'         { chooseElement.v = "_2"; } // variable 2 will be bound to all builtin (&)  terminals that appear in the grammar
    | 'anyCaseSensitiveTerminal'   { chooseElement.v = "_3"; } // variable 3 will be bound to all case sensitive (') terminals that appear in the grammar
    | 'anyCaseInsensitiveTerminal' { chooseElement.v = "_4"; } // variable 4 will be bound to all case insensitive (") terminals that appear in the grammar
    | 'anyParaterminal'            { chooseElement.v = "_5"; } // variable 5 will be bound to all paraterminals that appear in the grammar
    | 'anyNonterminal'             { chooseElement.v = "_6"; } // variable 6 will be bound to all nonterminals that appear in the grammar (paraterminals are not nonterminals)

    | 'anyLiteralTerminal'         { chooseElement.v = "_7"; } // variable 7 will be bound to all literal terminals = anyCaseSensitiveTerminal | anyCaseInsensitiveTerminal
    | 'anyTerminal'                { chooseElement.v = "_8"; } // variable 8 will be bound to all terminals that appear in the grammar including paraterminals
    | '(' chooseDiff ')'           { chooseElement.v = chooseDiff1.v; }


grammarRule ::= nonterminal^   
         { attributesOpt1.lhs = nonterminal1.v; if (currentModule.getDefaultStart() == null) currentModule.setDefaultStart(nonterminal1.v); 
           currentModule.checkFreshRHS(nonterminal1.v);
         }
         attributesOpt^ 
         '::='^ {rhs1.lhs = nonterminal1.v; rhs1.isDeleter = false; } rhs 

attributesOpt<lhs:String> ::= {attributes1.lhs = attributesOpt.lhs;} '<'^ attributes^ '>'^ | #^
attributes<lhs:String> ::= {attribute1.lhs = attributes.lhs; attributes1.lhs = attributes.lhs; } attribute attributes^ | #^
attribute<lhs:String> ::= ID ':'^ TYPE  { currentModule.addAttribute(attribute.lhs, ID1.v, TYPE1.v); } | ID { currentModule.addAttribute(attribute.lhs, ID1.v, "Value"); } 

(* Grammar body rules below *)

rhs<lhs:String isDeleter:boolean> ::= cat { if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);}

| cat { if (rhs.isDeleter) currentModule.addDeleter(rhs.lhs, artNewParent); else currentModule.addProduction(rhs.lhs, artNewParent);} 
  '|'^ {rhs1.lhs = rhs.lhs; rhs1.isDeleter = rhs.isDeleter; } rhs^ 

alt ::= cat^^ |         (* This cat is double hatted onto the alt so that we do not have a singleton alt *)
        cat '|'^ alt1^  (* alt1 matches the same language as alt, but has different hat behaviour *)
alt1 ::= cat | cat '|'^ alt1^ 

cat::= slot catTail^
catTail ::=  abbrev slot | abbrev slot catTail^

slot ::= #^ | action 

abbrev ::= iter^^ | iter '*'^^ | iter '+'^^ | iter '?'^^ 

iter ::= diff^^ | diff '@'^^ iter^ 

diff ::= union^^ | diff^ '\\'^^ union 

union ::= not^^ | union^ '||'^^ not

not ::=  element1^^ | '\\'^^ element1 

element1<doFirst:boolean> 
        ::= epsilon^^ | 
            nonterminal^^ { currentModule.addUsedNonterminal(nonterminal1.v); } | 
            caseSensitiveTerminal^^ | 
            caseInsensitiveTerminal^^ | 
            characterTerminal^^ | 
            characterSetTerminal^^ | 
            builtinTerminal^^ |

            epsilon^^ annotations | 
            nonterminal^^  { currentModule.addUsedNonterminal(nonterminal1.v); } annotations | 
            caseSensitiveTerminal^^ annotations | 
            caseInsensitiveTerminal^^ annotations | 
            characterTerminal^^ annotations | 
            characterSetTerminal^^ annotations | 
            builtinTerminal^^ annotations |

            '('^^ alt ')'^ 

annotations ::= annotation | annotation annotations^ 
annotation ::= name^^ | delay^^ | fold^^ 

name ::= ':'^ ID 
delay ::= '<'^ 
fold ::= '^_' | '^' | '^^' | '^^^' 

nonterminal<v:String> ::= ID^ {nonterminal.v = ID1.v;}
                        | STRING_DOLLAR^  {nonterminal.v = "$" + STRING_DOLLAR1.v + "$";} 
caseSensitiveTerminal<v:String> ::= STRING_PLAIN_SQ^ {caseSensitiveTerminal.v = STRING_PLAIN_SQ1.v;
 if (STRING_PLAIN_SQ1.v.length() == 0) throw new ARTUncheckedException("empty case sensitive terminal '' is not allowed - the empty string is denoted by #");
} 
caseInsensitiveTerminal<v:String> ::= STRING_DQ^ {caseInsensitiveTerminal.v = STRING_DQ1.v;
 if (STRING_DQ1.v.length() == 0) throw new ARTUncheckedException("empty case insensitive terminal is not allowed - the empty string is denoted by #");
} 
characterTerminal<v:String> ::= CHAR_BQ^ {characterTerminal.v = CHAR_BQ1.v;} 
characterSetTerminal<lo:String hi:String> ::= CHAR_BQ^  { characterSetTerminal.lo = CHAR_BQ1.v; } '..'^ CHAR_BQ^ { characterSetTerminal.hi = CHAR_BQ2.v;} 
builtinTerminal<v:String> ::= '&'^ ID^ {builtinTerminal.v = ID1.v; } 
insertionName<v:String> ::= '%%'^ ID^ {insertionName.v = ID1.v;}
epsilon ::=  '#'^

action<v:String> ::= STRING_BRACE_NEST^ { action.v = STRING_BRACE_NEST1.v; } 

(* Lexical rules faked up using builtins *)
    
ID <leftExtent:int rightExtent:int lexeme:String v:String b: boolean> ::= 
  &ID^ {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); } 

(* This is to support Java style generics in attribute declarations *)
TYPE<leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  TypeNest{TYPE.lexeme = artLexeme(TYPE.leftExtent, TYPE.rightExtent); TYPE.v = artLexemeAsID(TYPE.leftExtent, TYPE.rightExtent).trim(); } 

TypeNest ::= &ID | &ID '<' TypeList '>' 

TypeList ::= TypeNest | TypeNest ',' TypeList 

BOOLEAN <lexeme:String v:boolean> ::= 
  'true' { BOOLEAN.lexeme = "true"; BOOLEAN.v = true; } |
  'false' { BOOLEAN.lexeme = "false"; BOOLEAN.v = false; }
                                   
INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::= 
  &INTEGER^ {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); } 

REAL <leftExtent:int rightExtent:int lexeme:String v:double> ::= 
  &REAL^ {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); } 

STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DQ^ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); } 

STRING_DOLLAR <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DOLLAR^ {STRING_DOLLAR.lexeme = artLexeme(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); STRING_DOLLAR.v = artLexemeAsString(STRING_DOLLAR.leftExtent, STRING_DOLLAR.rightExtent); } 

STRING_PLAIN_SQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_PLAIN_SQ^ {STRING_PLAIN_SQ.lexeme = artLexeme(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent); STRING_PLAIN_SQ.v = artLexemeAsRawString(STRING_PLAIN_SQ.leftExtent, STRING_PLAIN_SQ.rightExtent, 1, 1); } 

CHAR_BQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &CHAR_BQ^ {CHAR_BQ.lexeme = artLexeme(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent); CHAR_BQ.v = artLexemeAsString(CHAR_BQ.leftExtent, CHAR_BQ.rightExtent, 1, 0); } 

STRING_BRACE_NEST <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_BRACE_NEST^	      {STRING_BRACE_NEST.lexeme = artLexeme(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); STRING_BRACE_NEST.v = artLexemeAsString(STRING_BRACE_NEST.leftExtent, STRING_BRACE_NEST.rightExtent); } 
