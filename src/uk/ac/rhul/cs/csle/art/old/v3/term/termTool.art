(* This is the prototyping grammar for TermTool and for the term parser

   The code is handcrafted recursive descent, but implements this grammar *)

text ::= termToy+

termToy ::= `! ( `? | `#
               | `> WS name?
	       | `< WS name
	       | `!
	       | `^
	       | `@ WS name
               | `.
               ) WS
          | expression

expression ::= operand ( `= WS expressionTail | expressionTail )

expressionTail ::= ( `|`> WS operand
                   | `<`| WS operand )*

operand ::= `( WS expression `) WS
	  | `# termToolName  
          | term

termToolName ::= letterDigit+

term ::= `_ digit* `*? WS type                   (* term variable *) 
       | element type ( `( WS subterms `) WS )?  (* non-variable *)

element ::= string | number | name
type ::= ':' WS name | #
subterms ::= term ( `, WS term )*

(* Exterally visible lexical productions *)
string ::= `" char* `" WS | `' char* `' WS
number ::= digit+ WS ( `. digit+ WS )?
name ::= nondigit char* WS

(* Internal lexical productions *)
WS ::= &SIMPLE_WHITESPACE*

digit ::= `0 | `1 | `2 | `3 | `4 | `5 | `6 | `7 | `8 | `9 

letter ::= `a | `b | `c | `d | `e | `f | `g | `h | `i | `j | `k | `l
| `m | `n | `o | `p | `q | `r | `s | `t | `u | `v | `w | `x | `y | `z
| `A | `B | `C | `D | `E | `F | `G | `H | `I | `J | `K | `L | `M | `N
| `O | `P | `Q | `R | `S | `T | `U | `V | `W | `X | `Y | `Z 

punctuation ::= `; | `: | `.

escape ::= `\\ `t
         | `\\ `n
         | `\\ `r
	 | `\\ `
	 | `\\ `(
         | `\\ `)
	 | `\\ `*
	 | `\\ `"
         | `\\ `'
         | `\\ `_

nondigit ::= letter | punctuation | escape

char ::= digit | nondigit

letterDigit::= letter | digit
	 


