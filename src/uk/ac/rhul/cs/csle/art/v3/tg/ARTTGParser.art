!whitespace &COMMENT_NEST_ART 
!whitespace &SIMPLE_WHITESPACE

!start text

!prelude {import java.io.File; import java.io.FileNotFoundException; import java.io.PrintWriter;}
!support {int stringCount; boolean vv3;}


text<vv3:boolean> ::= {vv3 = text.vv3;} tests

tests ::= test tests | test

test ::= ID optionOpt stringDollar

{ 
  StringBuilder stringBuilder = new StringBuilder(stringDollar1.v + " ");
  StringBuilder startSymbol = new StringBuilder();

  int cc;
  for (cc = 0; cc < stringDollar1.v.length(); cc++) {
    if (stringDollar1.v.charAt(cc) == '_' || Character.isLetter(stringDollar1.v.charAt(cc)))
      break; 
    if (stringDollar1.v.charAt(cc) == '(' && stringDollar1.v.charAt(cc+1) == '*') 
      do 
        cc++;
      while(!(stringDollar1.v.charAt(cc-1) == '*' && stringDollar1.v.charAt(cc) == ')'));
   }

  for (; cc < stringDollar1.v.length(); cc++) {
    if (!(stringDollar1.v.charAt(cc) == '_' || Character.isLetter(stringDollar1.v.charAt(cc))))
      break; 
    startSymbol.append(stringDollar1.v.charAt(cc));
   }

  try { PrintWriter out = new PrintWriter(new File(ID1.v + ".art"));
  if (vv3) {
//    out.println("module M");
  } else {
    out.println("(* " + ID1.v + ".art *)");
    out.println("M()(" + startSymbol.toString() + ")");
  }

  if (vv3) {
    for (int i = 1; i < stringBuilder.length(); i++)
      if (stringBuilder.charAt(i) == ';' && !(stringBuilder.charAt(i-1) == '\\'' && stringBuilder.charAt(i+1) == '\\'')){
        stringBuilder.replace(i, i+1, " "); 
      }
  }

System.out.println("    grammar = new Grammar(\\"" + ID1.v + "\\", \\"" + stringBuilder.toString() + "\\");");
  out.printf("%s", stringBuilder.toString());
  out.close(); }catch (FileNotFoundException e) { e.printStackTrace(); }
  System.err.println("New" + (vv3 ? " vv3" : " v2") + " test file '" + ID1.v + "' with options '" + optionOpt1.v /* + "': grammar '" + stringDollar1.v + "' mapped to '" + stringBuilder.toString() + "'"*/); 
  stringCount = 1;


 acceptOpt1.base = ID1.v; }
acceptOpt 

{ rejectOpt1.base = ID1.v; }
rejectOpt

optionOpt<v:String> ::= stringBrace { optionOpt.v = stringBrace1.v; } | #
acceptOpt<base:String count:int > ::= 'accept' { strings1.fileName = acceptOpt.base + ".acc"; strings1.accepting = true; } strings | #
rejectOpt<base:String count:int> ::= 'reject' { strings1.fileName = rejectOpt.base + ".rej"; strings1.accepting = false; } strings | #
          
strings<fileName:String accepting:boolean> ::= 
   # |
  stringDollar 
  { System.err	.println("New string file '" + strings.fileName + "_" + stringCount /* + ": string '" + stringDollar1.v + "'" */); 
    try { PrintWriter out = new PrintWriter(new File(strings.fileName + "_" + stringCount++));
    out.printf("%s", stringDollar1.v);
System.out.println("    tryString(\\"" + stringDollar1.v + "\\", " + strings.accepting + ", grammar, parser, lexer);");
    out.close(); }catch (FileNotFoundException e) { e.printStackTrace(); }
    strings1.fileName = strings.fileName;
    strings1.accepting = strings.accepting;
  } strings | 
  
   stringDollar
   { System.err.println("New string file '" + strings.fileName + "_" + stringCount /* + ": string '" + stringDollar1.v + "'"*/); 
    try { PrintWriter out = new PrintWriter(new File(strings.fileName + "_" + stringCount++));
    out.printf("%s", stringDollar1.v);
System.out.println("    tryString(\\"" + stringDollar1.v + "\\", " + strings.accepting + ", grammar, parser, lexer);");
    out.close(); }catch (FileNotFoundException e) { e.printStackTrace(); }
  } 

ID <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); } 

stringDollar <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DOLLAR {stringDollar.lexeme = artLexeme(stringDollar.leftExtent, stringDollar.rightExtent); stringDollar.v = artLexemeAsRawString(stringDollar.leftExtent, stringDollar.rightExtent); } 

stringBrace <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_BRACE {stringBrace.lexeme = artLexeme(stringBrace.leftExtent, stringBrace.rightExtent); stringBrace.v = artLexemeAsString(stringBrace.leftExtent, stringBrace.rightExtent); } 
